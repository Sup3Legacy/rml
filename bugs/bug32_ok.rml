(* 15/04/2008 *)
(* Pb dans le typeur.                                           *)
(* val killable_suspendable : 'a process -> 'b option process   *)

type ident = int
;;

type kind = Killable | Suspendable | Extensible
;;

let string_of_kind k =
  match k with 
  | Killable -> "k"
  | Suspendable -> "s"
  | Extensible -> "x" 

let gen_id =
  let cpt = ref 0 in
  fun () ->
    incr cpt;
    !cpt
;;

(**********************)
(* process management *)
(**********************)

let processes = ref ([] : (ident * kind list) list)

let process manage p kinds =
  let id = gen_id () in 
  print_endline ("["^(string_of_int id)^"]");
  processes := (id, kinds) :: !processes;
  let v = run (p id) in
  processes := List.filter (fun (x,_) -> x <> id) !processes;
  v
      
(********************)
(* Killable         *)
(********************)

signal kill;;

let process killable' (id: ident) p =
  do
    let v = run p in Some v
  until kill(ids) when List.mem id ids -> None done
;;


(********************)
(* Suspendable      *)
(********************)

signal sr;;

let process suspendable' (id: ident) p =
  signal suspend_me in
  signal kill_me default None gather (fun x y -> assert (y = None); Some x) in
  do
    begin
      control let v = run p in emit kill_me(v) with suspend_me
      || 
      loop await sr(ids) in if List.mem id ids then emit suspend_me end
    end;
    assert false
  until kill_me(Some x) -> x done
;;

let killable_suspendable p = 
  manage (fun id -> killable' id (suspendable' id p)) [ Killable; Suspendable]
;;
