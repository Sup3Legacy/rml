(**********************************************************************)
(*                                                                    *)
(*                           ReactiveML                               *)
(*                    http://reactiveML.org                           *)
(*                    http://rml.inria.fr                             *)
(*                                                                    *)
(*                          Louis Mandel                              *)
(*                                                                    *)
(*  Copyright 2002, 2007 Louis Mandel.  All rights reserved.          *)
(*  This file is distributed under the terms of the Q Public License  *)
(*  version 1.0.                                                      *)
(*                                                                    *)
(*  ReactiveML has been done in the following labs:                   *)
(*  - theme SPI, Laboratoire d'Informatique de Paris 6 (2002-2005)    *)
(*  - Verimag, CNRS Grenoble (2005-2006)                              *)
(*  - projet Moscova, INRIA Rocquencourt (2006-2007)                  *)
(*                                                                    *)
(**********************************************************************)

(* file: rmltop_machine_controler.ml *)
(* author: Louis Mandel *)
(* created: 2005-09-23  *)


signal sampled, suspend_resume, step_by_step, step 
    default () 
    gather (fun () () -> ());;

signal add 
    default Rmltop_global.rml_nothing 
    gather Rmltop_global.combine_process;;

let ref_to_sig ref_s s = 
  match !ref_s with 
  | None -> ()
  | Some v ->
      ref_s := None; 
      emit s v

let process generate_signals =
  loop
    Rmltop_global.lock();
    ref_to_sig Rmltop_global.sampled sampled;
    ref_to_sig Rmltop_global.suspend_resume suspend_resume;
    ref_to_sig Rmltop_global.step_by_step step_by_step;
    ref_to_sig Rmltop_global.step step;
    ref_to_sig Rmltop_global.add add;
    Rmltop_global.unlock();
    pause;
  end

let process add_process =
  loop
    await add(p) in
    Rmltop_global.add_process p;
  end

let process machine =
  loop
    do 
      control
        loop Rmltop_global.rml_react(); pause end
      with suspend_resume
    until step_by_step done;
    do 
      loop await step; Rmltop_global.rml_react() end
    until sampled done
  end

let process main =
  run machine
  ||
  run add_process
  || 
  run generate_signals
