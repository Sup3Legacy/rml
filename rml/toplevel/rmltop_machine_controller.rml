(**********************************************************************)
(*                                                                    *)
(*                           ReactiveML                               *)
(*                    http://reactiveML.org                           *)
(*                    http://rml.inria.fr                             *)
(*                                                                    *)
(*                          Louis Mandel                              *)
(*                                                                    *)
(*  Copyright 2002, 2007 Louis Mandel.  All rights reserved.          *)
(*  This file is distributed under the terms of the Q Public License  *)
(*  version 1.0.                                                      *)
(*                                                                    *)
(*  ReactiveML has been done in the following labs:                   *)
(*  - theme SPI, Laboratoire d'Informatique de Paris 6 (2002-2005)    *)
(*  - Verimag, CNRS Grenoble (2005-2006)                              *)
(*  - projet Moscova, INRIA Rocquencourt (2006-2007)                  *)
(*                                                                    *)
(**********************************************************************)

(* file: rmltop_machine_controller.ml *)
(* author: Louis Mandel *)
(* created: 2005-09-23  *)


signal suspend, resume
    default () 
    gather (fun () () -> ());;

signal step default 1 gather (fun x y -> x);;

let ref_to_sig ref_s s = 
  match !ref_s with 
  | None -> ()
  | Some v ->
      ref_s := None; 
      emit s v

let to_run_to_add () =
  List.iter 
    (fun p -> Rmltop_reactive_machine.emit_add p) 
    !Rmltop_global.to_run;
  Rmltop_global.to_run := []
  
let process generate_signals =
  loop
    Rmltop_global.lock();
    ref_to_sig Rmltop_global.suspend suspend;
    ref_to_sig Rmltop_global.resume resume;
    ref_to_sig Rmltop_global.step step;
    to_run_to_add ();
    Rmltop_global.unlock();
    pause;
  end

let process machine_controller =
  loop
    do 
      loop Rmltop_reactive_machine.rml_react(); pause end
    until suspend done;
    do 
      loop 
        await step(n) in 
        for i = 1 to n do Rmltop_reactive_machine.rml_react() done 
      end
    until resume done
  end


let process controller =
  run machine_controller
  ||
  run generate_signals
