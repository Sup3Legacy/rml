open Moteur;;
open Misc;;
open Convenient;;
open Fantome;;
open Affichage;;

let nbvie_init = 5;;
let nbtourinv = 60;; (* nombre de tour ou le pacman est invincible *)
let posdep = {xi=5;yi=5};; (* position de depart *) 

let coord_to_pos {xi=x;yi=y} = {xi=x/20;yi=y/20};;
let pos_to_coord {xi=x;yi=y} = {xi=x*20;yi=y*20};;
let mul_coord a {xi=xx;yi=yy} = {xi=a*xx;yi=a*yy};;
let add_coord {xi=xx1;yi=yy1}
              {xi=xx2;yi=yy2} = {xi=xx1+xx2;yi=yy1+yy2};;


(* Le processus pacman *)


let process pacman_clavier key_push new_move pacman_pos new_pos abandon =
  loop
    while not (pre new_pos) do 
      do
        run (sustain pacman_pos)
      until key_push done;
      let key = List.hd (pre ?key_push) in
      (match cmd_clavier key with
       | Quit   -> emit abandon
       | No_cmd -> emit pacman_pos (List.hd (pre ?pacman_pos))
       | Dir x  -> 
                   let (peut_bouger,npos) = 
                      est_possible (List.hd (pre ?pacman_pos)) x false 
                    in
                    if peut_bouger then
                    (emit pacman_pos (npos);
                     emit new_pos
                    )
                    else
                      emit pacman_pos (List.hd (pre ?pacman_pos))
      );
      pause;
    done;
    (* On attend avant de prendre en compte le mvt suivant *)
    do
      run (sustain pacman_pos);
    until new_move done;
  end;; 


let process pacman_affichage pacman_pos new_pos affichage new_move nbclignote =
  loop
    pause;
    await immediate new_pos;
    let anc_pos = List.hd (pre ?pacman_pos) in
    pause;
    emit affichage [ My_image(get_brique anc_pos, pos_to_coord anc_pos)];
  end
  ||
  loop
    (*** Affiche le pacman au bon endroit tant que  
     *** le joueur ne le fait pas deplacer          *)
    do
      loop
	emit affichage [My_image(joueur,
	                         pos_to_coord (List.hd (pre ?pacman_pos)))];
	pause;
	await immediate one nbclignote (n) in
	let pos = List.hd (pre ?pacman_pos) in
	emit affichage [My_image(
			(if n = 0 then
			  joueur
			else
			  (get_brique pos)),
	                pos_to_coord pos)];
	pause;
      end
    until new_pos done;
    (************)
    (* Fait le Bouger *)
    let npos = List.hd (pre ?pacman_pos) in
    (** Fait des trucs **)
    
    (* On peut prendre en compte un nouveau mouvement *)
    emit new_move;
  end;;

(* Met a jour le compteur de tour d'invincibilite *)
let process pacman_invincible invincible nb_inv new_pos bouge_fant =
  let decremente n = if n <= 0 then 0 else n - 1 in
  loop
    (* --------------- *)
    (* decremente le compteur tout les bouge_fant *)
    do
     loop
	do
	  pause;
	  run (sustain nb_inv);
	until bouge_fant done;
	let nb = List.hd (pre ?nb_inv) in
	emit nb_inv (decremente nb);
     end 
    until new_pos done;
    (* --------------- *)
    (* Quand le pacman bouge il faut voir si il devient invincible *)
    if pre invincible then
      emit nb_inv (nbtourinv)
    else
      if (pre bouge_fant) then 
	let nb = decremente (List.hd (pre ?nb_inv)) in  
        emit nb_inv (nb)
      else
        emit nb_inv (List.hd (pre ?nb_inv));
    pause;
    (* --------------- *)
    (* Pour eviter de louper un bouge_fant *)
    if (pre bouge_fant) then 
      let nb = decremente (List.hd (pre ?nb_inv)) in  
      emit nb_inv (nb)
    else
      emit nb_inv (List.hd (pre ?nb_inv));
  end;;


let process pacman_collision coll nb_inv nbclignote lostlive =
  (* Attend une collision et tue le pacman
     si il n'est pas invincible *)
  loop
    pause;
    await immediate coll;
    await immediate one nb_inv (nb) in
    await immediate one nbclignote (n) in
    if n = 0 && nb = 0 then
      emit lostlive;
  end;;

let process pacman_after_live lostlive nbclignote =
  loop
    do
      (* Decremente nbclignote de 1 a
         chaque instant *)
      loop
	let nb = List.hd (pre ?nbclignote) in
	emit nbclignote (if nb <= 0 then 0 else nb -1);
	pause;
      end;
    until lostlive done;
    (* il faut le faire clignoter sur 100
       instant *)
    emit nbclignote (100);
    pause;
  end;;

let process pacman_mange pacman_pos new_pos mangep invincible =
  (* Fait manger les points au pacman *)
  pause;
  (* Au debut, le pacman peut etre
     sur un point  *)
  await immediate one pacman_pos (pos) in
  if est_un_point pos then
  (supprime_point pos;
   emit mangep
  );
  (* Puis a chaque nouvelle position,
     regarde si il arrive sur un point *)
  loop
    await immediate new_pos;
    await immediate one pacman_pos (pos) in
    if est_un_gros_point pos then
    (emit invincible;
     supprime_point pos;
     emit mangep;
    )
    else if est_un_point pos then
      (supprime_point pos;
       emit mangep
      );
    pause;
  end;;


let process pacman affichage key_push mangep mypos new_aff fin
                   nb_inv lostlive
		   coll new_pos pacman_pos bouge_fant =
  signal invincible in (* Met en marche l'invincibilite *)
  signal new_move in (* Attente une nouvelle frappe de clavier *)
  signal nbclignote default [0] gather fun x y -> [x] in
  let current_pos = ref posdep in (* position courante *)
  run (pacman_mange pacman_pos new_pos mangep invincible)
  ||
  run (pacman_collision coll nb_inv nbclignote lostlive)
  ||
  run (pacman_after_live lostlive nbclignote)
  ||
  loop
    signal prepacman_pos default [posdep] gather fun x y -> [x] in
    do
      loop
        run (pacman_clavier key_push new_move pacman_pos new_pos fin)
        ||
        run (pacman_affichage pacman_pos new_pos affichage new_move nbclignote)
        ||
        run (pacman_invincible invincible nb_inv new_pos bouge_fant)
        ||
	loop
	  emit prepacman_pos (List.hd (pre ?pacman_pos));
	  pause;
	end;
      end
    until lostlive done;
    (* Avant de le remettre au debut, il faut l'effacer de sa position *)
    let p_pos = List.hd (pre ?prepacman_pos) in
    emit affichage [My_image(get_brique p_pos, pos_to_coord p_pos)];
    emit pacman_pos posdep;
    pause;
  end;;

let process arene_jeu graph key_push
                      victoire defaite abandon
		      nbvie nbpoint nbmt =
  signal mangep default () gather fun x y -> () in
  signal jpos in
  signal lostlive in
  signal mt default 0 gather fun a b -> b + 1 in
  signal coll default () gather fun a b -> () in
  signal new_aff default () gather fun x y -> x in
  signal nb_inv default [0] gather fun x y -> [x] in
  signal bouge_fant in
  signal pacman_pos default [posdep] gather fun x y -> [x] in
  signal new_pacman_pos in (* Obtient la nouvelle position *)
  (*  Les differents protagonistes : (fantome.rml, pacman.rml) *)
  run (fantome monstreRouge graph
                            bouge_fant
                            mt coll nb_inv
                            new_pacman_pos pacman_pos)
  ||   
  run (fantome monstreVert graph
                           bouge_fant
                           mt coll nb_inv
                           new_pacman_pos pacman_pos)
  ||   
  run (fantome monstreBleu graph
                           bouge_fant
                           mt coll nb_inv
                           new_pacman_pos pacman_pos)
  ||   
  run (fantome monstreViolet graph
                             bouge_fant
                             mt coll nb_inv
                             new_pacman_pos pacman_pos)
  ||   
  run (pacman graph
              key_push mangep jpos new_aff abandon
              nb_inv lostlive coll
              new_pacman_pos pacman_pos bouge_fant);
  ||
  (*  Les affichages  :  ( affichage.rml )  *) 
  run (score graph victoire mangep nbpoint)
  ||
  run (monstre_tue graph mt nbmt)
  ||
  run (vie graph defaite lostlive nbvie)
  ||
  loop
    emit bouge_fant;
    pause;
    pause;
    pause;
    pause;
  end;;



let process creer_scene graph key_push quitter =
  signal abandon,defaite,victoire in
  signal continue in
   (* Les compteurs pour les statistiques *)
  signal nbvie default [nbvie_init] gather fun x y ->[x] in
  signal nbpoint default [0] gather fun x y -> [x] in
  signal nbmt default [0] gather fun x y -> [x] in
  loop
    pause;
    pause;
    emit graph [My_fill_rect ({xi=0;yi=0},{xi=500;yi=550},Graphics.black)];
    pause;
    charge_graphique (); (* les images *)
    run (charge_table_to_X graph);
    pause;
    do
      do
	do
	  run (arene_jeu graph key_push
               victoire defaite abandon
	       nbvie nbpoint nbmt)
	until 
	| defaite (_) -> emit graph
            [My_texte("Vous avez perdu !! ('r' pour recommencer)",
                      Graphics.red,{xi=150;yi=520})]
	done
      until
      | abandon (_) ->
          emit graph
          [My_texte("Vous avez abandonne X-( !!! ('r' pour recommencer)",
                    Graphics.red,{xi=150;yi=520})];
      done
    until
	| victoire ->
            emit graph [My_texte("Vous avez GAGNE !!! ('c' pour continuer)",
                                 Graphics.red,{xi=150;yi=520})]
    done;
  (* On attend la decision de l'utilisateur *)
    let touche = if pre victoire then 'c' else 'r' in
    do
      loop
	pause;
        await immediate one key_push (s) in
        (match s with
         | 'q' -> emit quitter
(*         | k when k = touche -> emit continue;*)
         | k  -> if k = touche then emit continue;
        );
      end;
    until continue done;
    (* s'il le joueur a perdu *)
    if touche = 'r' then
    (emit nbvie  (nbvie_init);
     emit nbmt    (0);
     emit nbpoint (0);
    );
  end;;
     

