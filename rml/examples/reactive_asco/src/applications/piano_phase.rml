open Types
open Ascolib
open Music

(* Graphic Mess *)
type pos = Right | Left | Full

let draw_rect pos color =
  let wx = Graphics.size_x () in
  let wy = Graphics.size_y () in
  Graphics.set_color color;
  begin match pos with
  | Right ->
      Graphics.fill_rect (wx/2) 0 (wx/2) wy
  | Left ->
      Graphics.fill_rect 0 0 (wx/2) wy
  | Full ->
      Graphics.fill_rect 0 0 wx wy
  end

let process draw_sig asco s pos color =
  loop
    await s;
    draw_rect pos color;
    run (wait asco 0.2);
    draw_rect pos Graphics.background
  end

let process graphic_observer asco s1 s2 desync resync =
  loop
    do
      Graphics.clear_graph ();
      begin
	emit s1 ||
	run (draw_sig asco s1 Full Graphics.green)
      end
    until desync done;
    do
      Graphics.clear_graph ();
      begin
	run (draw_sig asco s1 Left Graphics.blue) ||
	run (draw_sig asco s2 Right Graphics.red)
      end
    until resync done
  end

(* Track the instrumental event k mod 12 *)
let process track asco k kth_note =
  let ie = instr_event asco in
  loop
    await ie ([evt]) when (evt.index mod 12 = k) in
    emit kth_note
  end

(* Compare the date of the last emision of two signal *)
(* and emit signal resync if |d1-d2| < eps *)
let process compare asco s1 s2 resync eps =
  let process stamps s f =
    loop
      await s;
      emit f (date asco)
    end
  in

  let process spy f1 f2 resync eps =
    loop
      await (f1 \/ f2);
      let t1 = last ?f1
      and t2 = last ?f2 in
      if abs_float (t1 -. t2) < eps then
	emit resync
    end
  in

  signal f1 default 0.0 gather (fun x y -> x) in
  signal f2 default 1.0 gather (fun x y -> x) in
  run (stamps s1 f1) ||
  run (stamps s2 f2) ||
  run (spy f1 f2 resync eps)



let process main =
  Graphics.open_graph " 600x300";
  let asco = create_asco "examples/piano_phase.asco" 120. in

  signal sync in
  signal desync in
  signal first_note in
  signal kth_note in

  (* Define the 12 notes loop with an emission of signal
    first_note at the begining of every sequence *)
  let process melody evt n delay first_note =
     let pattern =
       group tight partial
	 [0.0, action_note (delay, (E,4));
	  0.0, action_signal first_note;
	  delay, action_note (delay, (Fs,4));
	  delay, action_note (delay, (B,4));
	  delay, action_note (delay, (Cs,5));
	  delay, action_note (delay, (D,5));
	  delay, action_note (delay, (Fs,4));
	  delay, action_note (delay, (E,4));
	  delay, action_note (delay, (Cs,5));
	  delay, action_note (delay, (B,4));
	  delay, action_note (delay, (Fs,4));
	  delay, action_note (delay, (D,5));
	  delay, action_note (delay, (Cs,5));]
     in
    let period = 12. *. delay in
    run (link_and_loop asco evt period n [0.0, pattern])
  in

  (* Piano Phase sync -> desync -> sync...*)
  let piano_phase sync desync first_note kth_note =
    let rec process piano_phase k =
      let ev = last_event asco in
      run (melody ev 4 0.25 first_note);
      emit desync;
      do
	let ev = last_event asco in
	run (melody (ev+1) 16 0.2542 first_note) ||
	run (track asco k kth_note) ||
	run (compare asco first_note kth_note sync 0.05)
      until sync done;
      run (piano_phase ((k + 1) mod 12))
    in
    piano_phase 1
  in

  run (init_asco asco);
  begin
    run (listener asco) ||
    run (piano_phase sync desync first_note kth_note) ||
    run (graphic_observer asco first_note kth_note desync sync) ||
    run (sender asco)
  end
