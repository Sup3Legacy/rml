open Arg;;

let pas  = 0.0010;;

type coord =
    { x : float;
      y : float; }

(* Graphique *)
let center p max_x_2 max_y_2 =
  (int_of_float p.x + max_x_2,
   int_of_float p.y + max_y_2)

let color_of_int = function
  | 0 -> Graphics.rgb   0   0   0  (* noir *)
  | 1 -> Graphics.rgb   0   0 192  (* blue *)
  | 2 -> Graphics.rgb   0 204   0  (* green *)
  | 3 -> Graphics.rgb 250 250 250  (*  white *)
  | 4 -> Graphics.rgb 150   0   0  (* bordeau *) 
  | 5 -> Graphics.rgb 255  89  65  (*  63   0   (* rose orange *)  *)
  | 6 -> Graphics.rgb 255 240   0  (* yellow *)
  | _ -> Graphics.rgb 128 128   0

let color = ref 0
let affiche_ligne max_x_2 max_y_2 (p1,p2) =
  incr color;
  Graphics.set_color (color_of_int (!color mod 7));
  let x1, y1 = center p1 max_x_2 max_y_2 
  and x2, y2 = center p2 max_x_2 max_y_2 in
  Graphics.moveto x1 y1;
  Graphics.lineto x2 y2

let process fenetre p =
    Graphics.open_graph " 700x700";
    Graphics.auto_synchronize false;
    let max_x_2 = (Graphics.size_x()) / 2 in
    let max_y_2 = (Graphics.size_y()) / 2 in
    loop
      await p (all) in
      Graphics.clear_graph();
      List.iter (affiche_ligne max_x_2 max_y_2) all;
      Graphics.synchronize();
    end


(* Rotation autour de l'axe Z *)

let rot_Z r x = 
  let rx = r *. x in
  { x = 2. *. x *. cos(rx);
    y = 2. *. x *. sin(rx); }



let process proc_ligne t1 t2 color graph param_init generate_plot do_step =
   let gen_plot = generate_plot t1 t2 in
   let do_step = do_step () in
   let rec process boucle param =
      let (p1,p2) = do_step param in
        emit graph (gen_plot p1 p2);
        pause;
        run (boucle (p1,p2))  in
   run (boucle param_init);;

(* Pour le spirale premier du nom :)  *)

let pol_generate_plot t1 t2 r1 r2 =
      (rot_Z r1 t1,rot_Z r2 t2);;

let pol_do_step () (r1,r2) =
     r1 +. pas, r2 +. pas;;

let pol_cond min pas max =
   true;;

(* Pour les courbes *)

let lis_generate_plot t1 t2 p1 p2 =
   let transform t (a,b,c,n) =
(*       {x= a *. (sin (n *. t +. c));*)
       {x= a *. (sin (n *. t ));
        y= b *. (sin t)} in
  (transform t1 p1, transform t2 p2);;

let lis_do_step () =
    let i1 = ref 0.0001 in
    let i2 = ref 0.0001 in
    fun ((a1,b1,c1,n1),(a2,b2,c2,n2)) ->
    let n1 = n1 +. !i1 and n2 = n2 +. !i2 in
    if n1 > 0.600 then i1 := !i1 *. (-. 1.);
    if n2 > 0.600 then i2 := !i2 *. (-. 1.);
    if n1 < 0.400 then i1 := !i1 *. (-. 1.);
    if n2 < 0.400 then i2 := !i2 *. (-. 1.);
    (a1,b1,c1 +.0.01,n1),
    (a2,b2,c2 +.0.01,n2);;
    
let lis_cond min pas max =
   min +. pas  < max;;

(* Autre courbe a tester *)

let k = 3.;;
let pi2 = 6.28318;; (* 2 * PI *)
let pi2k = 6.28318 *. k;; (* 2 * PI *)
let lis2_do_step () =
   fun ((a1,b1,c1,n1),(a2,b2,c2,n2)) ->
   let n1 = n1 +. 0.0001 and
       n2 = n2 +. 0.0001 in
       (a1,b1,(1. -. n1) *. pi2k,n1),
       (a2,b2,(1. -. n2) *. pi2k,n2);; 
       
(* Pour creer les lignes : *)
    
let rec process creer_ligne id min max pas graph cond pinit generate step
                            proc_inter =
(*  if id mod 10 = 0 then 
    (print_int id;
     print_newline(););
*)
  (run (proc_ligne min (min +. pas) id graph pinit
                  generate step)
  ||
  if cond min pas max then
    (run proc_inter;
     run (creer_ligne (id+1)
                      (min +. pas)
                      max pas graph cond
                      pinit generate step
		      proc_inter)
    )
  );;



let process spirale_immediate s =
                        run (creer_ligne 1 0. 160. 0.06 s
                             lis_cond (0. , 0.)
			     pol_generate_plot
			     pol_do_step
			     (process nothing));; 

let process spirale s = run (creer_ligne 1 0. 160. 0.06 s
                             pol_cond (0. , 0.)
			     pol_generate_plot
			     pol_do_step
			     (process pause));; 
	   
let process courbe s =run (creer_ligne 1 0. 50. 0.05 s
                             lis_cond ((350.,350.,0.0,0.5),
			               (350.,350.,0.0,0.5))
			     lis_generate_plot
			     lis_do_step
			     (process nothing)
			  );;

let process courbe2 s = run (creer_ligne 1 0. (16. *. pi2k) 0.05 s
                             lis_cond ((350.,350.,0.0,0.5),
			               (350.,350.,0.0,0.5))
			     lis_generate_plot
			     lis_do_step
			     (process nothing)
			  );;



(*  Pour parser les arguments *)
type courbe = Spirale1 | Spirale2 | Lissajous1 | Lissajous2 | None;;
let num_c = ref None;;
let set_courbe typec () = num_c := typec;;

let head_options = "Usage: spirale -s | -si | -li1 | -li2";;
let args_options = [
   "-s", Unit (set_courbe Spirale1), "Visualiser la spirale";
   "-si", Unit (set_courbe Spirale2), "Visualiser la spirale infinie";
   "-li1", Unit (set_courbe Lissajous1), "Visualiser une courbe de Lissajous";
   "-li2", Unit (set_courbe Lissajous2), "Visualiser une courbe de Lissajous";
                   ];;
(****************************)

let process main =
  signal graph in
  Arg.parse args_options
             (fun s -> print_string ("je ne reconnait pas :" ^ s);
                       print_newline ())
             head_options;
  if !num_c = None then
     Arg.usage args_options head_options
  else
  (run (fenetre graph)
   ||
   match !num_c with
   | Spirale1 -> run (spirale_immediate graph)
   | Spirale2 -> run (spirale graph)
   | Lissajous1 -> run (courbe graph)
   | _ -> run (courbe2 graph)
  );;



