
open Hashtbl;;



let table_evt = Hashtbl.create 65537;;


(* Ici : var est une reference *)
let process await_sig var sig_name {} =
   let (_,p2) = try ( Hashtbl.find table_evt sig_name) with
                | _ -> failwith "il faut trouver un moyen pour ne rien faire dans ce cas" in
   run (p2 var) {};;


(* Ici : var est directemnt la variable à envoyer *)
let process emit_sig var sig_name {} =
   let (p1,_) = try ( Hashtbl.find table_evt sig_name) with
                | _ -> failwith "il faut trouver un moyen pour ne rien faire dans ce cas" in
   run (p1 var) {};;





let process creer_signal sig_name {} =
  signal s in
  let process p1 var {} =
     emit s (var)
          in
  let process p2 var {} =
     await one s (value) in
     var := value   
          in
    Hashtbl.add table_evt sig_name (p1,p2);;




let process jeu {out fin} =
   let min = ref 0 in
   let max = ref 1000 in
   loop
      let propose = (!min + !max) / 2 in
      let res = ref 0 in
      run (emit_sig propose "essai") {};
      run (await_sig res "result") {};
      if !res = 1 then
           min := propose
      else
           max := propose;
      pause;
      pause;
   end
   ||
   loop
      let var = ref 0 in
      run (await_sig var "result") {};
      print_string (if !var = 1 then "plus" else "moins");
      print_newline ();
      pause;
   end   
   ||
   let entier = Random.int 1000 in
   loop
     let p = ref 0 in
     run (await_sig p "essai") {};
     print_string "Le joueur propose:";
     print_int !p;
     print_newline ();
     if !p != entier then
       run (emit_sig (if !p < entier then 1 else -1) "result") {}
     else
       (print_string "Gagne, le nombre etait bien ";
        print_int entier;
        print_string " !!!";
        print_newline ();
        emit fin;
       );
     pause; 
   end;;




Random.self_init ();;



let process plus_moins {} =
  signal fin in
  run (creer_signal "result") {};
  run (creer_signal "essai") {};
  do
    run jeu {fin=fin}
  until fin;;
  



