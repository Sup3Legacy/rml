(* ---------------------------- *)
(* Types                        *)
(* ---------------------------- *)
type position =
    { x: int;
      y: int; 
    }

type direction = int

type routage_kind = LER | PDL

type movement_kind =
  | Mvt_random 
  | Mvt_random_waypoint of position ref
  | Mvt_same_dir of direction ref
  | Mvt_no_move
      
type pos_tbl = (position * int) array (* (pos * date) array *)

type node = 
    {  node_id: int;
       mutable node_date: int;
       mutable node_pos: position;

       node_pos_tbl_ler: pos_tbl;
       node_pos_tbl_pdl: pos_tbl;
       mutable node_neighbors: hello_info list;

       node_mvt_kind: movement_kind;
   }


and packet_header =
  | H_LER
  | H_PDL of pdl_info option

and packet =
    { mutable packet_header: packet_header;

      packet_src_id: int;

      packet_dest_id: int;
      mutable packet_dest_pos: position;
      mutable packet_dest_pos_age: int;

      packet_msg_len: int;

      mutable packet_route: node list;
      mutable packet_anchors: (node * node option * int * int) list;
      mutable packet_overhead: int;
    }

and pdl_info =
    { mutable pdl_id: int;
      mutable pdl_pos: position;
      mutable pdl_pos_age: int; (* may be < 0 if the pos is estimated *)

      mutable pdl_overhead: int;
   }

and hello_info =
    { hello_id: int;
      hello_pos: position;
      hello_node: node;
    }


(* ---------------------------- *)
(* Configuration                *)
(* ---------------------------- *)
let with_graphics = ref true

let prefix = ref "simul"
let with_stat = ref false
let set_prefix s =
  with_stat := true;
  prefix := s

(* node *)
let nb_node = ref 500

let coverage_range = ref 100
let coverage_range2 = ref (!coverage_range * !coverage_range)

let set_coverage_range n =
  coverage_range := n;
  coverage_range2 := !coverage_range * !coverage_range

(* simulation space size *)
(* taille de l'espace de simulation *)
let max_x = ref 1000
let max_y = ref 1000

let set_size s =
  let x = int_of_float (sqrt s) in
  let y = int_of_float (s /. (float_of_int x)) in
  max_x := x;
  max_y := y

(* taille d'une area *)
let size_x = ref 0
let size_y = ref 0

let nb_area_x = ref 0
let nb_area_y = ref 0 

(* message *)
let msg_proba = ref 50.0
let msg_len = ref 1

let pdl_proba = ref 100.0
let pdl_forecast = ref 20

(* density *)
let set_density d =
  let taille = float_of_int (!max_x * !max_y) in
  let portee =
    int_of_float 
      (sqrt(d *. taille /. (2.0 *. 3.14 *. float_of_int(!nb_node))))
  in
  set_coverage_range portee

(* ---------------------------- *)
(* Global values                *)
(* ---------------------------- *)
let no_info = -10000
let main_node = ref 1

signal tmp: (hello_info, hello_info list) event
let hello_array = ref (Array.make_matrix !nb_area_x !nb_area_y tmp)
(*    ((Obj.magic()): (info_hello, info_hello list) event)*)

let init () =
  size_x := 2 * !coverage_range;
  size_y := 2 * !coverage_range;
  nb_area_x := 
    if !max_x mod !size_x = 0 then 
      !max_x / !size_x 
    else 
      (!max_x / !size_x) + 1;
  nb_area_y :=
    if !max_y mod !size_y = 0 then 
      !max_y / !size_y 
    else 
      (!max_y / !size_y) + 1;
  hello_array := Array.make_matrix !nb_area_x !nb_area_y tmp;
  prefix :=
    !prefix 
    ^"-nb_node_"^(string_of_int !nb_node)
    ^"-maxx_"^(string_of_int (!max_x))
    ^"-dist_couv_"^(string_of_int (!coverage_range))
    ^"-msg_proba_"^(string_of_float (!msg_proba))
    ^"-msg_len_"^(string_of_int (!msg_len))
    ^"-pdl_proba_"^(string_of_float (!pdl_proba))
    ^"_"

(* ---------------------------- *)
(* Misc                         *)
(* ---------------------------- *) 
let distance2 pos1 pos2 = 
  (pos2.x - pos1.x) * (pos2.x - pos1.x) + 
    (pos2.y - pos1.y) * (pos2.y - pos1.y) 

let get_new_id =
  let cpt = ref (-1) in
  fun () ->
    incr cpt;
    !cpt
      
let make_pos x y =
  { x = x;
    y = y;
  }

let translate pos dir speed = 
  let x = pos.x in
  let y = pos.y in
  match dir with
  | 0 -> make_pos x (min (y+speed) !max_y)
  | 1 -> 
      make_pos 
	(min (x+speed) !max_x) 
	(min (y+speed) !max_y)
  | 2 -> make_pos (min (x+speed) !max_x) y
  | 3 -> 
      make_pos 
	(min (x+speed) !max_x) 
	(max (y-speed) 0)
  | 4 -> make_pos x (max (y-speed) 0)
  | 5 -> 
      make_pos 
	(max (x-speed) 0) 
	(max (y-speed) 0)
  | 6 -> make_pos (max (x-speed) 0) y
  | 7 -> 
      make_pos 
	(max (x-speed) 0)
	(min (y+speed) !max_y) 
  | _ -> pos
	

(* Creation fonctions *)


let new_node pos mvt_kind =
  {  node_id = get_new_id();
     node_date = 0;

     node_pos_tbl_ler = Array.make !nb_node (make_pos 0 0,no_info);
     node_pos_tbl_pdl = Array.make !nb_node (make_pos 0 0,no_info);
     node_neighbors = [];

     node_pos = pos;

     node_mvt_kind = mvt_kind;
   }
    
let make_packet header src_node dest len =
  let dest_pos, dest_pos_date = 
    match header with
    | H_LER -> src_node.node_pos_tbl_ler.(dest) 
    | H_PDL _ -> src_node.node_pos_tbl_pdl.(dest) 
  in
  { packet_header = header;
    packet_src_id = src_node.node_id;
    packet_dest_id = dest;
    packet_dest_pos = dest_pos;
    packet_dest_pos_age = abs (src_node.node_date - dest_pos_date);
    packet_msg_len = len;
    packet_route = [];
    packet_anchors = [];
    packet_overhead = 0;
  }

let make_ler_packet =  make_packet H_LER 


let make_pdl_info node overhead =
  { pdl_id = node.node_id;
    pdl_pos = node.node_pos;
    pdl_pos_age = 0; 
    pdl_overhead = overhead;
  }

let make_pdl_info_forecast node overhead =
  let forecast_pos = 
    match node.node_mvt_kind with
    | Mvt_random -> node.node_pos
    | Mvt_random_waypoint dest ->
	make_pos
	  (if node.node_pos.x < !dest.x then
	    min (node.node_pos.x + !pdl_forecast) !max_x
	  else 
	    if node.node_pos.x > !dest.x then
	      max (node.node_pos.x - !pdl_forecast) 0
	    else
	      node.node_pos.x)
	  (if node.node_pos.y < !dest.y then
	    min (node.node_pos.y + !pdl_forecast) !max_y
	  else 
	    if node.node_pos.y > !dest.y then
	      max (node.node_pos.y - !pdl_forecast) 0
	    else
	      node.node_pos.y)
    | Mvt_same_dir dir -> translate node.node_pos !dir !pdl_forecast
    | Mvt_no_move -> node.node_pos
  in
  { pdl_id = node.node_id;
    pdl_pos = forecast_pos;
    pdl_pos_age = - !pdl_forecast; 
    pdl_overhead = overhead;
  }

let make_pdl_packet src_node dest len =
  make_packet (H_PDL None) src_node dest len

let make_info_hello node =
  { hello_id = node.node_id; 
    hello_pos = node.node_pos;
    hello_node = node; 
  }


(* printing and string_of functions *)

let string_of_pos p =
  "("^(string_of_int p.x)^", "^(string_of_int p.y)^")"

let print_pos p = print_string (string_of_pos p)


let print_node n =
  begin
    print_string ("id : "^(string_of_int n.node_id));
    print_newline ();
    print_string ("date : "^(string_of_int n.node_date));
    print_newline ();
    print_string ("pos : "^(string_of_pos n.node_pos));
    print_newline ()
  end

let print_pos_tbl pos_tbl =
  for i = 0 to  !nb_node-1 do
    let (pos,date) = pos_tbl.(i) in
    print_string "\t";
    print_int i;
    print_string " : (";
    print_pos pos;
    print_string ", ";
    print_int date;
    print_string ")";
    print_newline();
  done

let string_of_pdl_info i =
  (string_of_int i.pdl_id)^"("^(string_of_int i.pdl_pos_age)^") = "^
  (string_of_pos i.pdl_pos)

let string_of_header = function
  | H_LER -> "LER"
  | H_PDL (Some i) -> "PDL : "^(string_of_pdl_info i)
  | H_PDL None -> "PDL : no info"

let print_packet p =
  print_string ("packet "^(string_of_header p.packet_header));
  print_newline();
  print_string ("\tsrc : "^(string_of_int p.packet_src_id));
  print_newline();
  print_string("\tdest : "^(string_of_int p.packet_dest_id)^"("^
	       (string_of_int p.packet_dest_pos_age)^") = "^
	       (string_of_pos p.packet_dest_pos));
  print_newline()

      
let print_hello_info i =
  print_string ("hello : "^
		(string_of_int i.hello_id)^" = "^
		(string_of_pos i.hello_pos));
  print_newline()

let print_neighbors l =
  print_string "[ ";
  List.iter
    (fun n -> print_string ((string_of_int n.hello_id)^"; "))
    l;
  print_string "]"

let string_of_kind = function
  | LER -> "LER"
  | PDL -> "PDL"
