open Global
open Graphics

let with_history = ref false 
let history = ref [] 

let draw_route p =
  let c1, c2, c3, dr =
    match p.packet_header with
    | H_LER -> (red, red, magenta, 2)
    | H_PDL _ -> (blue, blue, cyan, 1)
  in
  begin
    match p.packet_route with
    | n :: _ -> 
	Graphics.moveto n.node_pos.x n.node_pos.y;
	if n.node_id = p.packet_dest_id then
	  set_color c1
	else
	  set_color c3
    | _ -> ()
  end;
(*  set_color c1;*)
  List.iter
    (fun n ->
      Graphics.lineto n.node_pos.x n.node_pos.y;)
    p.packet_route;
  List.iter
    (function 
      | (src, Some info, lvl, _) ->
	  let r = 
	    int_of_float
	      (sqrt 
		 (float_of_int 
		    (distance2 src.node_pos info.node_pos)))
	  in
	  set_color c2;
	  Graphics.draw_circle
	    src.node_pos.x src.node_pos.y (r+dr)
      | (src, None, level, _) ->
	  let r =
	    level * !coverage_range
	  in
	  set_color c3;
	  Graphics.draw_circle
	    src.node_pos.x src.node_pos.y (r+dr))
    p.packet_anchors



let draw_info kind n =
  let pos_tbl = 
    match kind with
    | LER -> n.hello_node.node_pos_tbl_ler
    | PDL -> n.hello_node.node_pos_tbl_pdl
  in
  let _, date = pos_tbl.(!main_node) in
  if date = no_info then
    Graphics.set_color Graphics.yellow
  else
    if n.hello_node.node_date - date < 0 then
      Graphics.set_color Graphics.blue
    else
      if n.hello_node.node_date - date < 50 then
	Graphics.set_color Graphics.red
      else
	if n.hello_node.node_date - date < 100 then
	  Graphics.set_color Graphics.magenta
	else
	  if n.hello_node.node_date - date < 150 then
	    Graphics.set_color Graphics.cyan
	  else
	    Graphics.set_color Graphics.black;
  
  Graphics.moveto n.hello_pos.x n.hello_pos.y;
(*  Graphics.draw_string (string_of_int n.hello_id);*)
  Graphics.draw_circle n.hello_pos.x n.hello_pos.y 1;
  Graphics.set_color Graphics.black;
  if n.hello_id = !main_node then
    (Graphics.draw_circle n.hello_pos.x n.hello_pos.y !coverage_range;
     if !with_history then
       (history := n.hello_pos :: !history;
	begin
	  match !history with
	  | pos :: _ -> Graphics.moveto pos.x pos.y
	  | _ -> ()
	end;
	List.iter
	  (fun pos ->
	    Graphics.lineto pos.x pos.y)
	  !history))


let draw_info_ascii kind n =
  Graphics.set_color Graphics.black;
  let pos_tbl = 
    match kind with
    | LER -> n.hello_node.node_pos_tbl_ler
    | PDL -> n.hello_node.node_pos_tbl_pdl
  in
  let _, date = pos_tbl.(!main_node) in
  Graphics.moveto n.hello_pos.x n.hello_pos.y;
  if date = no_info then
    Graphics.draw_string "."
  else
    if n.hello_node.node_date - date < 0 then
      Graphics.draw_string "#"
    else
      if n.hello_node.node_date - date < 50 then
	Graphics.draw_string "@"
      else
	if n.hello_node.node_date - date < 100 then
	  Graphics.draw_string "*"
	else
	  if n.hello_node.node_date - date < 150 then
	    Graphics.draw_string "+"
	  else
	    Graphics.draw_string "-";
  if n.hello_id = !main_node then
    (Graphics.draw_circle n.hello_pos.x n.hello_pos.y !coverage_range;
     if !with_history then
       (history := n.hello_pos :: !history;
	begin
	  match !history with
	  | pos :: _ -> Graphics.moveto pos.x pos.y
	  | _ -> ()
	end;
	List.iter
	  (fun pos ->
	    Graphics.lineto pos.x pos.y)
	  !history))

let draw_neighborhood self =
  Graphics.set_color Graphics.green;
  List.iter
    (fun info ->
      Graphics.moveto self.hello_pos.x self.hello_pos.y;
      Graphics.lineto info.hello_pos.x info.hello_pos.y)
    self.hello_node.node_neighbors;
  Graphics.set_color Graphics.black

(*
let process draw_simul draw =
   Graphics.open_graph (" "^(string_of_int !max_x)^"x"^(string_of_int !max_y));
(*  Graphics.open_graph "";*)
  Graphics.auto_synchronize false;
  loop
    await draw (all) in 
    Graphics.clear_graph();
    List.iter (draw_info PDL) all;
(*    List.iter draw_neighborhood all;*)
    Graphics.synchronize();
    pause;
    Graphics.synchronize();
    for i = 1 to 30 do 
      pause;
    done
  end
*)   


let search_closer (x,y) all =
  let pos = make_pos x y in
  let d2_min, best_info =
    List.fold_left 
      (fun (d2min, info_min) info ->
	let d2 = distance2 info.hello_pos pos in
	if d2 < d2min then
	  (d2,Some info)
	else 
	  (d2min, info_min))
      (max_int, None)
      all
  in
  match best_info with
  | None -> !main_node
  | Some info -> info.hello_id
    

let process draw_simul draw suspend =
   Graphics.open_graph (" "^(string_of_int !max_x)^"x"^(string_of_int !max_y));
(*  Graphics.open_graph "";*)
  Graphics.set_window_title 
    ("Simulation of "^(string_of_int !nb_node)^" nodes");
  Graphics.auto_synchronize false;

  let with_neighborhood = ref false in
  let routage = ref PDL in
  let all_infos = ref [] in
  signal (*suspend,*) refresh in
  signal key, click in
  control
    loop
      await draw (all) in
      all_infos := all;
      emit refresh
    end
  with suspend
  ||
  loop
    await refresh;
    Graphics.clear_graph();
    List.iter (draw_info !routage) !all_infos;
    if !with_neighborhood then List.iter draw_neighborhood !all_infos;
    Graphics.synchronize();
    pause;
    Graphics.synchronize();
    pause;
    Graphics.synchronize();
  end 
  ||
  print_string "Press";
  print_newline();
  print_string "\th: to display main node's path";
  print_newline();
  print_string "\tn: to display the neighborhood";
  print_newline();
  print_string "\tm: to change main node";
  print_newline();
  print_string "\tp: to suspend the simulation";
  print_newline();
  print_string "\tr: to change protocol location distribution";
  print_newline();

  loop
    await one key (c) in
    begin
      match c with
      | 'n' -> 
	  with_neighborhood := not !with_neighborhood;
	  emit refresh
      | 'p' ->
	  emit suspend
      | 'm' ->
	  print_string "click on a node";
	  print_newline();
	  await one click (p) in
	  main_node := search_closer p !all_infos;
	  history := [];
	  emit refresh
      | 'r' ->
	  begin
	    match !routage with
	    | LER -> routage := PDL
	    | PDL -> routage := LER
	  end;
	  emit refresh
      | 'h' ->
	  with_history := not !with_history;
	  history := [];
	  emit refresh
      | _ -> nothing
    end;
    pause
  end
  ||
  run (Rml_graphics.read_key key)
  ||
  run (Rml_graphics.read_click click)
