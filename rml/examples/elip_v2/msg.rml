open Position
open Global

let make_msg src =
  if (Random.float 100.0) < msg_proba then 
    let msg = ref [] in
    let dest = Random.int nb_nodes in
    let len = (Random.int msg_len) + 1 in
    for i = 1 to len do
      msg := dest::!msg
    done;
    !msg
  else
    []



(* Insert ELIP info *)

(* Criterion *)

let criterion_proba () =
  Random.float 100.0 < elip_proba 

let criterion_locality self last_insert_pos =
  (distance2 self.pos last_insert_pos) > elip_min_insert_dist2

(* Instert *)

let insert_elip_info self p criterion =
  begin match p.header with
  | H_ELIP info ->
      begin match info with
      | None -> 
	  if criterion self p then
	    p.header <- H_ELIP (Some (make_elip_header self.id self.pos))
      | Some pos -> ()
      end
  | _ -> ()
  end

let insert_proba self p = 
  insert_elip_info self p (fun _ _ -> criterion_proba ())

let insert_proba_locality pos_init =
  let last_insert_pos = ref pos_init in
  fun self p ->
    insert_elip_info self p 
      (fun node p -> 
	if (criterion_proba ()) or 
	  (criterion_locality node !last_insert_pos)
	then
	  (last_insert_pos := node.pos;
	   true)
	else false) 

let insert_locality pos_init =
  let last_insert_pos = ref pos_init in
  fun self p ->
    insert_elip_info self p 
      (fun node p -> 
	if criterion_locality node !last_insert_pos then
	  (last_insert_pos := node.pos;
	   true)
	else false) 
