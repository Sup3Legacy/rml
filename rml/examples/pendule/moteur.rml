open Unix;;
(**)
type point =
{
	x : float;
        y : float;
        z : float;
};;

(**)


let scalar   c1 c2 = c1.x *. c2.x +.
                     c1.y *. c1.y +.
                     c1.z *. c1.z;;

let mul_coef c1 c  = {x = c1.x *. c;
                      y = c1.y *. c;
                      z = c1.z *. c;
                     };;



let add_vect c1 c2 ={x = c1.x +. c2.x;
                     y = c1.y +. c2.y;
                     z = c1.z +. c2.z;
                    };;


let sous_vect c1 c2 ={x = c1.x -. c2.x;
                      y = c1.y -. c2.y;
                      z = c1.z -. c2.z;
                     };;


let print_coord c = print_char  '(';
                    print_float c.x;
                    print_char  ',';
                    print_float c.y;
                    print_char  ',';
                    print_float c.z;
                    print_char  ')';;

let coord_null = {x=0.;y=0.;z=0.};;


(**)

let get_mouse_pos() =
  let status = Graphics.wait_next_event [Graphics.Poll] in
(*  let max_x_2 = (Graphics.size_x()) / 2 in*)
(*  let max_y_2 = (Graphics.size_y()) / 2 in*)
  {x = float_of_int (status.Graphics.mouse_x);
   y = float_of_int (status.Graphics.mouse_y);
   z = 0.0;};;

let get_key() = Graphics.read_key();;

let color_of_int = function
  | 0 -> Graphics.rgb   0   0   0  (* noir *)
  | 1 -> Graphics.rgb   0   0 192  (* blue *)
  | 2 -> Graphics.rgb   0 204   0  (* green *)
  | 3 -> Graphics.rgb 255 255 255  (*  white *)
  | 4 -> Graphics.rgb 150   0   0  (* bordeau *) 
  | 5 -> Graphics.rgb 255  89  65  (*  (* rose orange *)  *)
  | 6 -> Graphics.rgb 255 240   0  (* yellow *)
  | _ -> Graphics.rgb 128 128   0;;




let maj_aff (s,p) = (* s = position debut du pendule , p = position bout de pendule *)
(*  let p = mul_coef p 10. in*)
  let max_x_2 = (Graphics.size_x()) / 2 in
  let max_y_2 = (Graphics.size_y()) / 2 in
(*  let mouse_x,mouse_y = (int_of_float s.x,int_of_float s.y) in*)
  Graphics.clear_graph();
  Graphics.moveto      (int_of_float s.x) (int_of_float s.y);
  Graphics.lineto      (int_of_float p.x) (int_of_float p.y);
  Graphics.draw_circle (int_of_float p.x) (int_of_float p.y) 5;
  Graphics.synchronize();;






(******************************************************)
let fenetre =
(*----------------------------------------------------*)
(*----------------------------------------------------*)
(* machine read_click [new_planete]                   *)
(*----------------------------------------------------*)
     let rec process read_click button_p pos_p {out a_click,a_move,mouse_pos} =
      let button = Graphics.button_down() in 
      let pos    = get_mouse_pos () in
      (
       if button_p then
           if (not button) then
              emit a_click pos
           else 
              emit a_move ((* coord_m pos_p*) pos) 
       else
              emit a_move {x=0.;y=0.;z=0.};
      );
      emit mouse_pos (pos);
      pause;
      run (read_click button pos) {a_click=a_click;a_move=a_move;mouse_pos=mouse_pos}
  in

(*-----------------------------------------------------*)
(* machine read_key []                                 *)
(*-----------------------------------------------------*)
  let process read_key {out key_push} =
    loop 
      if Graphics.key_pressed() then
         emit key_push (get_key ()) 
      else 
         nothing;
      pause
    end
  in
(*-----------------------------------------------------*)
(* machine read_key []                                 *)
(*-----------------------------------------------------*)
  process {out a_click,a_move,key_push,pos;
           in  p} ->
(*    let t = ref (gettimeofday ()) in*)
(*----------------------------------------------------*)
    Graphics.open_graph "";
    Graphics.auto_synchronize false;
    Graphics.set_line_width 4;
    Graphics.set_color (color_of_int 0);
    loop
      await immediate one p (all) in
      maj_aff all;
      pause;
    end
    ||
    run (read_click false (get_mouse_pos ())) {a_click = a_click;a_move = a_move;mouse_pos=pos}
    ||
    run read_key {key_push=key_push};;


