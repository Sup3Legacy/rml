open Moteur;;


let pi = 3.14159;;
let pis2 = pi /. 2.;;



let dt = 0.05;;
let usdt = 1. /. dt;;

let integre anc dx =
(*           anc  +. (dx *.  dt);;*)
           let k1 = dx *. dt in
           let k2 = (dx +. k1 /. 2.) *. dt in
           let k3 = (dx +. k2 /. 2.) *. dt in
           let k4 = (dx +. k3) *. dt in
           anc +. (k1 +. 2. *. k2 +. 2. *. k3 +. k4) /. 6. ;;


let integrev anc dx =
           add_vect anc  (mul_coef dx dt);;

let derive anc dx = (dx -. anc) /. dt;;

let derivev anc dx = mul_coef (sous_vect dx anc) usdt;;



(* Acceleration donnee par la souris *)

let process acce {in  pos;
                  out a} =
   let vits = ref coord_null in (* Vitesse de la souris *)
   let poss = ref coord_null in (* Position de la souris *)
   await immediate one pos (mpos) in
   poss := mul_coef mpos 0.1;
   pause;
   loop
      (await immediate one pos (mousepos) in
       let nvits = derivev !poss (mul_coef mousepos 0.1) in
       let acce = derivev !vits nvits in
       vits := nvits;
       poss := mul_coef mousepos 0.1;
       emit a (acce,mousepos);
       pause;
      )
   end;;

 


let masse = 2.;;
let g = 9.81;;
let l = 10.;;
let b = 0.1;;

let maj_pos (theta,omega) a =
        let omega = integre omega ( masse *. g *. (sin theta) +. 
                                    a.y *. (sin theta) -. a.x *. (cos theta) ) in 
        integre theta (omega /. l -. b *. theta), omega ;;



(* Determine la position relative au curseur du pendule dans l'espace : *)

let calcul_pos pos (theta,_) = 
                           {y = pos.y +. 10. *. l *. (sin (theta +. pis2));
                            x = pos.x -. 10. *. l *. (cos (theta +. pis2));
                            z = 0.;
                           };;


let process pendule {out p,theta;
                     in  a} =
        let param = ref ( 0. ,0.) in
        loop
           emit theta (fst !param);
           await immediate one a (acce_pos) in
           let (acce,pos) = acce_pos in
           param := maj_pos !param acce;
           emit p (pos,calcul_pos pos !param);
	   pause;
        end;;


(* Calcul la position pour que le pendule reste en haut *)

let process acce_auto d {out acce;
                         in  theta} =
    let accc = ref {x=d;y=0.;z=0.} in
    let vitc = ref coord_null in
    let preteta = ref 0. in
    let posc = ref {x=100.;y=100.;z=0.} in
    emit acce (!accc,!posc);
    pause;	
    loop
        await immediate one theta (teta) in
        let tetd = derive !preteta teta in
        let d2x0 = ( 8.0 *. g *. tan(teta)
                      +. sqrt(1.0 *. g *. masse *. l) *. tetd
                      +. 0.5 *. !posc.x /. l) in
        let naccc = {x=d2x0;y=0.;z=0.} in
        let nvitc = integrev !vitc naccc in
        let nposc = integrev !posc nvitc in
        vitc := nvitc;
        preteta := teta;
        posc := nposc;
	print_coord naccc;
	print_newline ();
	print_float teta;
	print_newline ();
        emit acce (naccc,nposc);
        pause;
    end;;


(* On lit les parametres passe en ligne de commande pour
   savoir si l'on est en manual ou pas *)

let parse_arg () =
    try (
         let mode = if Sys.argv.(1) = "-auto" then
	               1
                    else
	              (print_string "usage: pendule [-auto [acce_deb]]";
		       print_newline ();
		       0
                      ) in
         let accedeb = try (float_of_string Sys.argv.(2)) with _ -> -200. in
         (mode,accedeb)
        ) with
          _ -> (0,-100.);;


(* On cree la scene *)

let process creer_scene v {out p;
                           in  pos} =
     signal a in
     signal t in
     let (mode,accdeb) = parse_arg () in
     run pendule {p=p;a=a;theta=t}
     ||
     if mode = 0 then 
       run acce {pos=pos;a=a}
     else
       run (acce_auto accdeb)  {theta=t;acce=a} 
