
type coord =
{
 x : float;
 y : float;
 z : float;
};; 



(********************************************)
(********************************************)
(*** Fonctions de manipulation de points  ***)
(********************************************)
(********************************************)

(* additionne deux points *)
let coord_p p1 p2 = {x = p1.x +. p2.x;
                     y = p1.y +. p2.y;
                     z = p1.z +. p2.z};;



(* soustrait deux points *)
let coord_m p1 p2 = {x = p1.x -. p2.x;
                     y = p1.y -. p2.y;
                     z = p1.z -. p2.z};;

(* produit scalaire *)

let scalar p1 p2 = (p1.x *. p2.x) +. (p1.y *. p2.y) +. (p1.z *. p2.z);;



(* projecte un point sur l'ecran et rend le couple (x,y) correspondant *)

let dist_oeil = 400.;;
let prof_z = 50.;;

let project p max_x_2 max_y_2 =
 (int_of_float ((p.x *. dist_oeil) /. (dist_oeil +. prof_z -. p.z)) + max_x_2) ,
 (int_of_float ((p.y *. dist_oeil) /. (dist_oeil +. prof_z -. p.z)) + max_y_2);;


(* effectue la rotation de 90 deg selon l'axe *)

let rotation_axe sens axe =
   if axe = 0 then (* X *)
      function p -> {x =              p.x;y = -. (sens *. p.z);z = sens *. p.y}

   else if axe = 1 then (* Y *)
      function p -> {x = -. (sens *. p.z);y =   p.y           ;z = sens *. p.x}

   else if axe = 2 then (* Z *)
      function p -> {x = -. (sens *. p.y);y = sens *. p.x     ;z = p.z}

   else        (* pas de rotation *)
      function p -> p;;


(* effectue la rotation selon un degre suivant un axe *)
let rotation_deg deg axe =
        let cs = (cos deg) and sn = (sin deg) in
        if axe = 0 then
              function p -> {x = p.x;
                             y = (p.y*.cs) -. (p.z*.sn);
                             z = (p.z*.cs) +. (p.y*.sn)}
        else
              if axe = 1 then
                     function p -> {x = (p.x*.cs) -. (p.z*.sn);
                                    y = p.y;
                                    z = (p.z*.cs) +. (p.x*.sn)}
              else
                  if axe = 2 then
                     function p -> {x = (p.x*.cs) -. (p.y*.sn);
                                    y = (p.y*.cs) +. (p.x*.sn);
                                    z = p.z}
                  else
                     function p -> p;;



(* obtient la position de la souris *)

let get_mouse_pos() =
  let status = Graphics.wait_next_event [Graphics.Poll] in
  let max_x_2 = (Graphics.size_x()) / 2 in
  let max_y_2 = (Graphics.size_y()) / 2 in
  let mouse_x = status.Graphics.mouse_x - max_x_2 and
      mouse_y = status.Graphics.mouse_y - max_y_2 in
  if (abs mouse_x < max_x_2) && (abs mouse_y < max_y_2) then
        {x = float_of_int mouse_x;
         y = float_of_int mouse_y;
         z = 0.0;}
  else
        {x= 0.;y=0.;z=1.} ;;


let get_key() = Graphics.read_key();;


let color_of_int = function
  | 0 -> Graphics.rgb   0   0   0  (* noir    *)
  | 1 -> Graphics.rgb   0   0 192  (* bleu    *)
  | 2 -> Graphics.rgb   0 204   0  (* vert    *)
  | 3 -> Graphics.rgb 250 250 250  (* blanc   *)
  | 4 -> Graphics.rgb 150   0   0  (* bordeau *)
  | 5 -> Graphics.rgb 255  89  65  (*  63   0   (* rose orange *)  *)
  | 6 -> Graphics.rgb 255 240   0  (* jaune   *)
  | _ -> Graphics.rgb 128 128   0;;





let maj_aff =
  let isvisible norm vect =
          scalar norm vect < 0. in
  function all ->
  let max_x_2 = (Graphics.size_x()) / 2 in
  let max_y_2 = (Graphics.size_y()) / 2 in
  let affiche_cube (lf,pos) =
          Array.iter
               (fun (lp,norm,color) ->
                    if color != 0  then
                       if (isvisible norm
                                     (coord_p  (coord_p norm pos )  {x=0.;y=0.;z= -. (dist_oeil +. prof_z)})
                          ) then
                       ( let pointarray = (Array.map (function x -> project (coord_p x pos) max_x_2 max_y_2  ) lp) in
                          Graphics.set_color (color_of_int (color mod 7));
                          Graphics.fill_poly pointarray;
                          Graphics.set_color (color_of_int 0);
                          Graphics.moveto (fst pointarray.(0)) (snd pointarray.(0));
                          Array.iter (function (x,y) -> Graphics.lineto x y) pointarray;
                          (function (x,y) -> Graphics.lineto x y)  pointarray.(0);
                       )
                    else
                       ();
               )
               lf in
  Graphics.clear_graph();
(*  Graphics.set_color Graphics.blue;*)
  List.iter affiche_cube all;
  Graphics.synchronize()
;;


(******************************************************)
let fenetre =
(*----------------------------------------------------*)
(* machine read_click [a_click]                       *)
(*----------------------------------------------------*)
     let rec process read_click button_p pos_p  {out a_click} =
      let button = Graphics.button_down() in
      let pos    = get_mouse_pos () in
      (if button_p && not button && not (pos.z = 1.) then
              emit a_click (pos)
       else
              nothing;
      );
      pause;
      run (read_click button pos) {a_click=a_click}
  in

(*-----------------------------------------------------*)
(* machine read_key []                                 *)
(*-----------------------------------------------------*)
  let process read_key {out key_push} =
    loop
      if Graphics.key_pressed() then
         emit key_push (get_key ())
      else
         nothing;
      pause
    end
  in
  process {out click,key_push;in p} ->
(*----------------------------------------------------*)
    Graphics.open_graph "";
    Graphics.auto_synchronize false;
    loop
      await p (all) in
      maj_aff all (* (fst rot) (snd rot) *) ;
    end
    ||
    run (read_click false (get_mouse_pos ())) {a_click=click}
    ||
    run read_key {key_push=key_push};;

