open Moteur;;


let pis2 = 3.14159 /. 2.;;
let pas  = pis2 /. 20.;;

(* Processus Cube *)

type cube_tourne = | Axe of Moteur.axe
                   | Nomvt;;

(* A chaque instant, emet le cube (tourné ou non) sur le signal p *)

(*  quand un mouvement est terminé, envoie le signal mvt_suiv
    après une pause  *)

let rec process proc_cube current_cube tourne graph mvt_suiv =
     let deg = ref 0. in
       await one tourne (axe,sens) in
       match axe with
       | Nomvt -> emit graph current_cube;
	           run (proc_cube current_cube tourne graph mvt_suiv)
       | Axe axe -> deg := 0.;
                    while !deg < pis2
		    do
                      deg := ! deg +. pas;
                      let new_cube = if axe = No then
                                        current_cube
                                     else
                                        tourne_cube (rotation_deg (!deg *. sens) axe)
                      current_cube in
                      emit graph (new_cube);
                      pause;
                    done; 
		    let new_cube = if axe = No then
		                     current_cube
                                   else
                                     tourne_cube (rotation_axe sens axe)
                                                  current_cube in
                    emit graph (new_cube);
                    pause;
                    emit mvt_suiv;
                    run (proc_cube new_cube tourne graph mvt_suiv);;

(* Creer le cube de taille size qui se trouve en position pos *)

let creer_cube size pos (c1,c2,c3,c4,c5,c6) =
    let pn = size /. 2. in
    let mn = -. pn in 
  [|
(*  Face 1 ( devant )  *)              
    ([|{x = mn; y = pn; z = pn}; {x = pn; y = pn; z = pn}; {x = pn; y = mn; z = pn}; {x = mn; y = mn; z = pn}|],
                      {x = 0.; y = 0.; z = pn} ,c1) (* norm *)
    ;
(*  Face 2 ( droit )  *)              
    ([|{x = pn; y = pn; z = pn}; {x = pn; y = pn; z = mn}; {x = pn; y = mn; z = mn}; {x = pn; y = mn; z = pn}|],
                      {x = pn; y = 0.; z = 0.} ,c2) (* norm *)
    ;
(*  Face 3 ( haut )  *)              
    ([|{x = mn; y = pn; z = mn}; {x = pn; y = pn; z = mn}; {x = pn; y = pn; z = pn}; {x = mn; y = pn; z = pn}|],
                      {x = 0.; y = pn; z = 0.} ,c3) (* norm *)
    ;
(*  Face 4 ( gauche )  *)              
    ([|{x = mn; y = pn; z = mn}; {x = mn; y = pn; z = pn}; {x = mn; y = mn; z = pn}; {x = mn; y = mn; z = mn}|],
                      {x = mn; y = 0.; z = 0.} ,c4) (* norm *)
    ;
(*  Face 5 ( derriere )  *)              
    ([|{x = pn; y = pn; z = mn}; {x = mn; y = pn; z = mn}; {x = mn; y = mn; z = mn}; {x = pn; y = mn; z = mn}|],
                      {x = 0.; y = 0.; z = mn} ,c5) (* norm *)
    ;
(*  Face 6 ( bas )  *)              
    ([|{x = mn; y = mn; z = pn}; {x = pn; y = mn; z = pn}; {x = pn; y = mn; z = mn}; {x = mn; y = mn; z = mn}|],
                      {x = 0.; y = mn; z = 0.} ,c6) (* norm *)
                |]
    , pos;;



(* Couleur (renvoi les couleurs du cube) *)


let cube_color (x,y,z) =
        ((if z = 0 then 5 else 0),
         (if x = 2 then 1 else 0),
         (if y = 0 then 2 else 0),
         (if x = 0 then 3 else 0),
         (if z = 2 then 4 else 0),
         (if y = 2 then 6 else 0)
        );;
   


(* tableau des emplacement des cubes sur le rubik's Cube *)

signal s0,s1,s2,s3,s4,s5,s6,s7,s8,
       s9,s10,s11,s12,s13,s14,s15,
       s16,s17,s18,s19,s20,s21,s22,
       s23,s24,s25,s26;;


let l_c = [| s0;s1;s2;s3;s4;s5;s6;s7;s8;
             s9;s10;s11;s12;s13;s14;s15;
             s16;s17;s18;s19;s20;s21;s22;
             s23;s24;s25;s26 |];;



(*let rec creer_l_c n l = if n < 0 then*)
(*                            l_c := Array.of_list l*)
(*                        else*)
(*                            creer_l_c (n-1) (n::l);;*)



(* Fonction instantanée *)

let process rubik_tourne lfirst rot =
(*    let l = List.map (function x -> Array.get !l_c x) lfirst in*)
    let mvt_nop = if fst rot = Nomvt then (Nomvt,1.) else (Axe No,1.) in
    (* Demande aux cubes de bouger *)
    for i = 0 to 26
    do
       if List.mem i lfirst then
           emit l_c.(i) (rot)
       else
           emit l_c.(i) (mvt_nop)
    done;
    (* Effectue la permutation lie au mouvement
        (il s'agit de la position logique, les
	 cubes seront a cette endroit a la
	 fin du mouvement) *)
    if not (lfirst = []) then
      let a = Array.get l_c (List.nth lfirst 0) in
      let b = Array.get l_c (List.nth lfirst 4) in
      if snd rot = -1. then
      (Array.set l_c (List.nth lfirst 0) (Array.get l_c (List.nth lfirst 3));
       Array.set l_c (List.nth lfirst 3) (Array.get l_c (List.nth lfirst 2));
       Array.set l_c (List.nth lfirst 2) (Array.get l_c (List.nth lfirst 1));
       Array.set l_c (List.nth lfirst 1) a;
       Array.set l_c (List.nth lfirst 4) (Array.get l_c (List.nth lfirst 7));
       Array.set l_c (List.nth lfirst 7) (Array.get l_c (List.nth lfirst 6));
       Array.set l_c (List.nth lfirst 6) (Array.get l_c (List.nth lfirst 5));
       Array.set l_c (List.nth lfirst 5) b;
      )
      else
      (Array.set l_c (List.nth lfirst 0) (Array.get l_c (List.nth lfirst 1));
       Array.set l_c (List.nth lfirst 1) (Array.get l_c (List.nth lfirst 2));
       Array.set l_c (List.nth lfirst 2) (Array.get l_c (List.nth lfirst 3));
       Array.set l_c (List.nth lfirst 3) a;
       Array.set l_c (List.nth lfirst 4) (Array.get l_c (List.nth lfirst 5));
       Array.set l_c (List.nth lfirst 5) (Array.get l_c (List.nth lfirst 6));
       Array.set l_c (List.nth lfirst 6) (Array.get l_c (List.nth lfirst 7));
       Array.set l_c (List.nth lfirst 7) b;
      );;


(* Reçoit un mouvement (sur mvt) à effectuer repercute l'ordre
   sur les cubes (rubik_tourne) *)

let process fait_bouger mvt =
        loop
            await one mvt (mouvement) in
            let axe = fst  mouvement in
            let num = fst (snd mouvement) in
            let sens = snd (snd mouvement) in
	    match axe with
            | Y -> let decal = 9 * num in
                   run (rubik_tourne [0 + decal;2 + decal;8 + decal;
                                      6 + decal;1 + decal;5 + decal;
                                      7 + decal;3 + decal;4 + decal]  
                                     (Axe axe,sens) )
            | X -> run (rubik_tourne [ 0 + num;6 + num;24 + num;
                                      18 + num;3 + num;15 + num;
                                      21 + num;9 + num;12 + num]  
                                     (Axe axe,sens) )
            | Z -> let decal =  3 * num in
                   run (rubik_tourne [ 0 + decal;2 + decal;20 + decal;
                                      18 + decal;1 + decal;11 + decal;
                                      19 + decal;9 + decal;10 + decal]  
                                     (Axe axe,sens) )
            | No -> run (rubik_tourne []  (Nomvt,1.) )
        end;;

let process creer_rubik graph mvt_suiv mvt =
      run (proc_cube (creer_cube 40. {x= -40.;y=  40.;z=  40.} (cube_color (0,0,0)) ) s0 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=   0.;y=  40.;z=  40.} (cube_color (1,0,0)) ) s1 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=  40.;y=  40.;z=  40.} (cube_color (2,0,0)) ) s2 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x= -40.;y=  40.;z=   0.} (cube_color (0,0,1)) ) s3 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=   0.;y=  40.;z=   0.} (cube_color (1,0,1)) ) s4 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=  40.;y=  40.;z=   0.} (cube_color (2,0,1)) ) s5 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x= -40.;y=  40.;z= -40.} (cube_color (0,0,2)) ) s6 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=   0.;y=  40.;z= -40.} (cube_color (1,0,2)) ) s7 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=  40.;y=  40.;z= -40.} (cube_color (2,0,2)) ) s8 graph mvt_suiv)
      ||

      run (proc_cube (creer_cube 40. {x= -40.;y=   0.;z=  40.} (cube_color (0,1,0)) ) s9 graph  mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=   0.;y=   0.;z=  40.} (cube_color (1,1,0)) ) s10 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=  40.;y=   0.;z=  40.} (cube_color (2,1,0)) ) s11 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x= -40.;y=   0.;z=   0.} (cube_color (0,1,1)) ) s12 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=   0.;y=   0.;z=   0.} (cube_color (1,1,1)) ) s13 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=  40.;y=   0.;z=   0.} (cube_color (2,1,1)) ) s14 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x= -40.;y=   0.;z= -40.} (cube_color (0,1,2)) ) s15 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=   0.;y=   0.;z= -40.} (cube_color (1,1,2)) ) s16 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=  40.;y=   0.;z= -40.} (cube_color (2,1,2)) ) s17 graph mvt_suiv)
      ||

      run (proc_cube (creer_cube 40. {x= -40.;y= -40.;z=  40.} (cube_color (0,2,0)) ) s18 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=   0.;y= -40.;z=  40.} (cube_color (1,2,0)) ) s19 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=  40.;y= -40.;z=  40.} (cube_color (2,2,0)) ) s20 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x= -40.;y= -40.;z=   0.} (cube_color (0,2,1)) ) s21 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=   0.;y= -40.;z=   0.} (cube_color (1,2,1)) ) s22 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=  40.;y= -40.;z=   0.} (cube_color (2,2,1)) ) s23 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x= -40.;y= -40.;z= -40.} (cube_color (0,2,2)) ) s24 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=   0.;y= -40.;z= -40.} (cube_color (1,2,2)) ) s25 graph mvt_suiv)
      ||
      run (proc_cube (creer_cube 40. {x=  40.;y= -40.;z= -40.} (cube_color (2,2,2)) ) s26 graph mvt_suiv)
      ||
      run (fait_bouger mvt);;


