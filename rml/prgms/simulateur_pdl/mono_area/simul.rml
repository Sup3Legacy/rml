open Global

let get_id =
  let cpt = ref (-1) in
  fun () ->
    incr cpt;
    !cpt

let new_node x y =
  {  node_id = get_id();
     node_posx = x;
     node_posy = y;
     node_last_direction = 0; 
     node_pos_tbl = Array.make nb_node (0,0,1000000)
}

let make_info_hello node =
    { info_id = node.node_id; 
      info_posx = node.node_posx;
      info_posy = node.node_posy; }
   

let distance2 x1 y1 x2 y2 = 
  (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) 

let get_neighbors n1 others =
  let filter n2 =
    let d2 = distance2 n1.node_posx n1.node_posy n2.info_posx n2.info_posy in
    d2 < dist_couv2 
  in
  List.filter filter others

let get_dir node =
  match Random.int 8 with
  | 0 -> Up
  | 1 -> Up_Right
  | 2 -> Right
  | 3 -> Down_Right
  | 4 -> Down
  | 5 -> Down_Left
  | 6 -> Left
  | 7 -> Up_Left
  | _ -> failwith "Err: get_dir"
	  
let move node = 
  let dir = get_dir node in
  let x = node.node_posx in
  let y = node.node_posy in
  match dir with
  | Up -> if y < maxy then node.node_posy <- y + 1 
  | Down -> if 0 < y then node.node_posy <- y - 1 
  | Left -> if 0 < x then node.node_posx <- x - 1 
  | Right -> if x < maxx then node.node_posx <- x + 1 
  | Up_Left -> 
      if 0 < x && y < maxy then 
	(node.node_posy <- y + 1;
	 node.node_posx <- x - 1)
  | Up_Right -> 
      if x < maxx && y < maxy then 
	(node.node_posy <- y + 1;
	 node.node_posx <- x + 1)
  | Down_Left -> 
      if 0 < x && 0 < y then 
	(node.node_posy <- y - 1;
	 node.node_posx <- x - 1)
  | Down_Right -> 
      if x < maxx && 0 < y then 
	(node.node_posy <- y - 1;
	 node.node_posx <- x + 1)

let process node x_init y_init {inout msg_hello} =
  let self = new_node x_init y_init  in
  loop
    move self;
    let info = make_info_hello self in
    emit msg_hello info;
    await msg_hello (all) in
    let neighbors = get_neighbors self all in
    Pos_tbl.update self.node_pos_tbl neighbors
  end

let draw_info n =
  Graphics.draw_circle n.info_posx n.info_posy 1


let process draw {in msg_hello} =
  Graphics.open_graph (" "^(string_of_int maxx)^"x"^(string_of_int maxy));
  loop
    await msg_hello (all) in 
    Graphics.clear_graph();
    List.iter draw_info all;
    Graphics.synchronize();
    pause;
  end

let rec process make_nodes n {inout msg_hello} =
  if n > 0 then
    let x = Random.int maxx in
    let y = Random.int maxy in
    run (node x y) {msg_hello=msg_hello}
    ||
    run (make_nodes (n-1)) {msg_hello=msg_hello}


let process main {} =
  signal msg_hello in
  run (make_nodes nb_node) {msg_hello=msg_hello}
  ||
  run draw {msg_hello=msg_hello}

