open Global

let insert_pdl p node = 
(*
  let dist =
    (sqrt
      (float_of_int 
	 (distance2
	    node.node_pos.x node.node_pos.y
	    p.packet_dest_pos.x p.packet_dest_pos.y)))
      /.
    (float_of_int !dist_couv)
  in
  let proba = 1.0 -. (1.0 /. (dist +. 1.0)) in
*)
  let proba = 1.0 in
  if Random.float 100.0 < !pdl_proba *. proba then
    match p.packet_header with
    | H_PDL (Some _) -> ()
    | H_PDL None -> 
	p.packet_header <- H_PDL (Some(make_pdl_info_forecast node 0)) 
    | _ -> ()
  else    
    ()

let routage_success p = 
  if !with_graphics then
    if p.packet_src_id = !main_node then Draw.draw_route p;
  Stat.packet_success_stat p

let routage_fail p = 
  if !with_graphics then
    if p.packet_dest_id = !main_node then
      Draw.draw_route p;
  Stat.packet_fail_stat p
  
let search_best_age kind src_node dest age_limit =
  let level = ref 0 in
  let node_cpt = ref 0 in
  let visited = Array.make !nb_node false in
  visited.(src_node.node_id) <- true;
  let rec aux neighbors =
    incr level;
    let current_level = !level in
    let visited_cpt = ref 0 in
    let next_neighbors = ref [] in
    let best =
      List.fold_left
	(fun best info ->
	  if visited.(info.hello_id) then
	    best
	  else
	    begin
	      let n = info.hello_node in
	      let pos_tbl = 
		match kind with
		| LER -> n.node_pos_tbl_ler 
		| PDL -> n.node_pos_tbl_pdl
	      in
	      visited.(info.hello_id) <- true;
	      incr node_cpt;
	      incr visited_cpt;
	      next_neighbors :=
		List.rev_append n.node_neighbors !next_neighbors;
	      match best with
	      | None ->
		  let (pos, date) = pos_tbl.(dest) in
		  if date <> no_info & 
		    abs (n.node_date - date) <= age_limit 
		  then
		    Some (n, (pos, abs (n.node_date - date)))
		  else
		    best
	      | Some (_, (_, best_age)) ->
		  let (pos, date) = pos_tbl.(dest) in
		  if abs (n.node_date - date) < best_age then
		    Some (n, (pos, abs (n.node_date - date)))
		  else
		    best
	    end)
	None
	neighbors
    in
    if (best = None) & (!next_neighbors <> []) then
      let (best, lvl, node_cpt, overhead) = aux !next_neighbors in
      (best, lvl, node_cpt, (1+lvl-current_level) * !visited_cpt + overhead)
    else
begin
(* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *)
(*
  if kind = PDL then
(
 print_string "-------------------------------------";
 print_newline ();
 print_string ("dest = "^(string_of_int dest));
 print_newline();
 print_string ("age_limit = "^(string_of_int age_limit));
 print_newline();
 print_string ("level = "^(string_of_int !level));
 print_newline();
 print_string "anchor = ";
 print_newline ();
 print_node src_node;
 print_string "info node = ";
 print_newline ();
 match best with
 | None -> print_string "None"
 | Some (n, (_, best_age)) ->
     print_node n;
     print_string ("best_age = "^(string_of_int best_age));
     print_newline();
) ;
*)
(* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *)

     (best, !level, !node_cpt, !visited_cpt)
end
  in 
  fun neighbors ->
    aux neighbors


(* *********************************************************************** *)
(* Routage function                                                         *)
(* *********************************************************************** *)

let rec routage kind self p =

(* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *)
(*
  print_string "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^";
  print_newline();
  print_string ("routage "^(string_of_kind kind)^" : "^
		(string_of_int self.node_id)^" -> "^
		(string_of_int p.packet_dest_id));
  print_newline();
  print_packet p;
  print_newline();
*)
(* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! *)

  p.packet_route <- self :: p.packet_route;
  
  let pos_tbl = 
    match kind with
    | LER -> self.node_pos_tbl_ler 
    | PDL -> self.node_pos_tbl_pdl
  in

  if kind = PDL then
    (* ROUTAGE PDL *)
    begin
      (match p.packet_header with
      | H_PDL (Some info) ->
	  Pos_tbl.set pos_tbl 
	    info.pdl_id info.pdl_pos (self.node_date - info.pdl_pos_age);
	  info.pdl_overhead <- info.pdl_overhead + 1
      | _ -> ());
      insert_pdl p self;
    end;
  Pos_tbl.set pos_tbl 
    p.packet_dest_id p.packet_dest_pos 
    (self.node_date - p.packet_dest_pos_age);

  if self.node_id = p.packet_dest_id then
    (* routage success *)
    routage_success p
  else 
    (* recherche du node voisin le plus proche de la dest *)
    let d2 = 
      distance2 
	self.node_pos.x self.node_pos.y 
	p.packet_dest_pos.x p.packet_dest_pos.y
    in
    let d2_min, best_info =
      List.fold_left 
	(fun (d2min, info_min) info ->
	  if info.hello_id = p.packet_dest_id then
	    (-1, info)
	  else
	    let d2 = 
	      distance2 
		info.hello_pos.x info.hello_pos.y 
		p.packet_dest_pos.x p.packet_dest_pos.y
	    in
	    if d2 < d2min then
	      (d2,info)
	    else 
	      (d2min, info_min))
	(d2, make_info_hello self)
	self.node_neighbors
    in
    if self.node_id = best_info.hello_id then
      if p.packet_dest_pos_age = 0 then
	(* routage fail *)
	routage_fail p
      else
	let pos_dest, date = pos_tbl.(p.packet_dest_id) in
	if abs (self.node_date - date) < (p.packet_dest_pos_age / 2) then
	  (p.packet_anchors <- (self, Some self, 0, 0) :: p.packet_anchors;
	   p.packet_dest_pos <- pos_dest;
	   p.packet_dest_pos_age <- abs (self.node_date - date);
	   routage kind self p)
	else
	  match 
	    search_best_age kind
	      self
	      p.packet_dest_id (p.packet_dest_pos_age/2) 
	      self.node_neighbors
	  with
	  | Some (node, (pos, age)), level, nb_nodes, overhead ->
	      p.packet_anchors <- 
		(self, Some node, level, nb_nodes) :: p.packet_anchors;
	      p.packet_dest_pos <- pos;
	      p.packet_dest_pos_age <- age;
	      p.packet_overhead <- p.packet_overhead + overhead;
	      pos_tbl.(p.packet_dest_id) <- (pos, self.node_date - age);
	      routage kind self p
	  | None, level, nb_nodes, overhead -> 
              (* routage fail *)
	      p.packet_anchors <- 
		(self, None, level, nb_nodes) :: p.packet_anchors;
	      p.packet_overhead <- p.packet_overhead + overhead;
	      routage_fail p
    else
      routage kind best_info.hello_node p




let route kind src_node dest_id len =
  let pos_tbl = 
    match kind with
    | LER -> src_node.node_pos_tbl_ler
    | PDL -> src_node.node_pos_tbl_pdl
  in
  let packet = 
    match kind with
    | LER -> make_ler_packet src_node dest_id len 
    | PDL -> make_pdl_packet src_node dest_id len 
  in
  let _, pos_dest_date = pos_tbl.(packet.packet_dest_id) in
  if pos_dest_date = no_info then
    match Routage.search_best_age kind
	src_node
	packet.packet_dest_id max_int
	src_node.node_neighbors
    with
    | None, level, nb_nodes, overhead ->
	(* routage fail *)
	packet.packet_anchors <- 
	  (src_node, None, level, nb_nodes) :: packet.packet_anchors;
	packet.packet_overhead <- packet.packet_overhead + overhead;
	Routage.routage_fail packet
    | Some (node, (pos, age)), level, nb_nodes, overhead ->
	packet.packet_anchors <- 
	  (src_node, Some node, level, nb_nodes) :: packet.packet_anchors;
	packet.packet_dest_pos <- pos;
	packet.packet_dest_pos_age <- age;
	packet.packet_overhead <- packet.packet_overhead + overhead;
	pos_tbl.(packet.packet_dest_id) <- (pos, src_node.node_date-age);
	Routage.routage kind src_node packet;
  else
    Routage.routage kind src_node packet


