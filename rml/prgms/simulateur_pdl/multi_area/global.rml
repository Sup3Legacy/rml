type dir_t =
  | Up
  | Down
  | Left
  | Right
  | Up_Left
  | Up_Right
  | Down_Left
  | Down_Right
 
type pos_tbl = (int * int * int) array (* (posx * posy * age) array *)

type node = 
    {  node_id: int;
       mutable node_age: int;
       mutable node_posx: int;
       mutable node_posy: int;
       mutable node_last_direction: int;
       node_pos_tbl: pos_tbl;
   }

type packet =
    { packet_id_source: int;
      packet_id_destination: int;
      mutable packet_posx_dest: int;
      mutable packet_posy_dest: int;
      mutable packet_age_pos_dest: int;
      mutable packet_id_pdl: int;
      mutable packet_posx_pdl: int;
      mutable packet_posy_pdl: int;
   }

type info_hello =
    { info_id: int;
      info_posx: int;
      info_posy: int; }

let dist_couv = 100
let dist_couv2 = dist_couv * dist_couv
let nb_node = 500

(* taille de l'espace de simulation *)
let maxx = 1000
let maxy = 1000

(* taille d'une area *)
let size_x = 100
let size_y = 100

let nb_area_x = 
  if maxx mod size_x = 0 then maxx / size_x else (maxx / size_x) + 1
let nb_area_y =
  if maxy mod size_y = 0 then maxy / size_y else (maxy / size_y) + 1


let hello_array =
  Array.make_matrix nb_area_x nb_area_y 
    ((Obj.magic()): (info_hello, info_hello list) event)

