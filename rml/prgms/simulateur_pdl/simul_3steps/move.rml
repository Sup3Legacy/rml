open Global

let move node dir = 
  let x = node.node_posx in
  let y = node.node_posy in
  match dir with
  | 0 -> 
      if y < maxy-1 then node.node_posy <- y + 1 
  | 1 -> 
      if x < maxx-1 && y < maxy-1 then 
	(node.node_posy <- y + 1;
	 node.node_posx <- x + 1)
  | 2 -> 
      if x < maxx-1 then node.node_posx <- x + 1 
  | 3 -> 
      if x < maxx-1 && 0 < y then 
	(node.node_posy <- y - 1;
	 node.node_posx <- x + 1)
  | 4 -> 
      if 0 < y then node.node_posy <- y - 1 
  | 5 -> 
      if 0 < x && 0 < y then 
	(node.node_posy <- y - 1;
	 node.node_posx <- x - 1)
  | 6 -> 
      if 0 < x then node.node_posx <- x - 1 
  | 7 -> 
      if 0 < x && y < maxy-1 then 
	(node.node_posy <- y + 1;
	 node.node_posx <- x - 1)
  | _ -> ()

let random node = 
  move node (Random.int 8) 

let same_dir node =
  let p = Random.int 100 in
  if p < 80 then 
    ();
  if 80 <= p & p < 85 then 
    node.node_last_direction <- (node.node_last_direction + 1) mod 8;
  if 85 <= p & p < 90 then 
    node.node_last_direction <- (node.node_last_direction + 7) mod 8;
  if 90 <= p & p < 92 then 
    node.node_last_direction <- (node.node_last_direction + 2) mod 8;
  if 92 <= p & p < 94 then 
    node.node_last_direction <- (node.node_last_direction + 6) mod 8;
  if 94 <= p & p < 96 then 
    node.node_last_direction <- (node.node_last_direction + 3) mod 8;
  if 96 <= p & p < 98 then 
    node.node_last_direction <- (node.node_last_direction + 5) mod 8;
  if 98 <= p & p < 100 then 
    node.node_last_direction <- (node.node_last_direction + 4) mod 8;
  move node node.node_last_direction


let random_waypoint n =
  if (n.node_posx = n.node_destx) & (n.node_posy = n.node_desty) then
    (n.node_destx <- Random.int maxx;
     n.node_desty <- Random.int maxy;);
  
  if n.node_posx < n.node_destx then
    (n.node_posx <- n.node_posx + 1;
     if n.node_posy < n.node_desty then
       n.node_posy <- n.node_posy + 1
     else
      if n.node_posy > n.node_desty then
	n.node_posy <- n.node_posy - 1)
  else if n.node_posx > n.node_destx then
    (n.node_posx <- n.node_posx - 1;
     if n.node_posy < n.node_desty then
       n.node_posy <- n.node_posy + 1
     else
       if n.node_posy > n.node_desty then
	 n.node_posy <- n.node_posy - 1)
  else
    if n.node_posy < n.node_desty then
      n.node_posy <- n.node_posy + 1
    else
      if n.node_posy > n.node_desty then
	n.node_posy <- n.node_posy - 1
