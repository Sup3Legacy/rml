(**********************************************************************)
(*                                                                    *)
(*                           ReactiveML                               *)
(*                    http://reactiveML.org                           *)
(*                    http://rml.inria.fr                             *)
(*                                                                    *)
(*                          Louis Mandel                              *)
(*                                                                    *)
(*  Copyright 2002, 2007 Louis Mandel.  All rights reserved.          *)
(*  This file is distributed under the terms of the Q Public License  *)
(*  version 1.0.                                                      *)
(*                                                                    *)
(*  ReactiveML has been done in the following labs:                   *)
(*  - theme SPI, Laboratoire d'Informatique de Paris 6 (2002-2005)    *)
(*  - Verimag, CNRS Grenoble (2005-2006)                              *)
(*  - projet Moscova, INRIA Rocquencourt (2006-2007)                  *)
(*                                                                    *)
(**********************************************************************)

(* file: async.rmli *)
(* created: 2013-07-22  *)
(* author: Louis Mandel *)

val safe_emit : ('a, 'b) event -> 'a -> unit
(** [safe_emit s v] will emit the value [v] on the signal [s], but
    there is no guaranty on the instant of emission. This function can
    be called from an external thread.
*)

val proc_of_fun : ('a -> 'b) -> 'a -> 'b process
(** [run proc_of_fun f x] executes [f x] in a thread. The execution
    can last several instants and terminates when the computation of
    [f x] terminates. If [f x] do not terminate, the system reamins
    cooperative.
*)
