# autoconf input for Reactive-ML 
# taken from autoconf input for Lucid-Synchrone
# Author : Gregoire Hamon, Marc Pouzet 
# Organization : SPI team, LIP6 laboratory, University Paris 6 

AC_INIT(compiler/main/main.ml)

AC_PROG_MAKE_SET
AC_PROG_CPP
AC_PROG_INSTALL

# Check for Ocaml compilers
# borrowed from JC Filliatre

# we first look for ocamlc in the path; if not present, we fail
AC_CHECK_PROG(OCAMLC,ocamlc,ocamlc,no)
if test "$OCAMLC" = no ; then
        AC_MSG_ERROR(Cannot find ocamlc.)
fi

# we extract Ocaml version number and library path
OCAMLVERSION=`$OCAMLC -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
echo "ocaml version is $OCAMLVERSION"
bad_version=`expr "$OCAMLVERSION" \< "3.05"`
if test "$bad_version" = "1"; then
   AC_MSG_ERROR(Ocaml >= 3.05 needed.)
fi

OCAMLLIB=`$OCAMLC -v | tail -1 | cut -f 4 -d " "`
echo "ocaml library path is $OCAMLLIB"

# then we look for ocamlopt; if not present, we issue a warning
# if the version is not the same, we also discard it
# we set OCAMLBEST to "opt" or "byte", whether ocamlopt is available or not
AC_CHECK_PROG(OCAMLOPT,ocamlopt,ocamlopt,no)
OCAMLBEST=byte
if test "$OCAMLOPT" = no ; then
        AC_MSG_WARN(Cannot find ocamlopt; bytecode compilation only.)
else
        AC_MSG_CHECKING(ocamlopt version)
        TMPVERSION=`$OCAMLOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
        if test "$TMPVERSION" != $OCAMLVERSION ; then
            AC_MSG_RESULT(differs from ocamlc; ocamlopt discarded.)
            OCAMLOPT=no
        else
            AC_MSG_RESULT(ok)
            OCAMLBEST=opt
        fi
fi

# checking for ocamlc.opt
AC_CHECK_PROG(OCAMLCDOTOPT,ocamlc.opt,ocamlc.opt,no)
if test "$OCAMLCDOTOPT" != no ; then
        AC_MSG_CHECKING(ocamlc.opt version)
        TMPVERSION=`$OCAMLCDOTOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
        if test "$TMPVERSION" != $OCAMLVERSION ; then
            AC_MSG_RESULT(differs from ocamlc; ocamlc.opt discarded.)
        else
            AC_MSG_RESULT(ok)
            OCAMLC=$OCAMLCDOTOPT
        fi
fi

# checking for ocamlopt.opt
if test "$OCAMLOPT" != no ; then
    AC_CHECK_PROG(OCAMLOPTDOTOPT,ocamlopt.opt,ocamlopt.opt,no)
    if test "$OCAMLOPTDOTOPT" != no ; then
        AC_MSG_CHECKING(ocamlc.opt version)
        TMPVER=`$OCAMLOPTDOTOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
        if test "$TMPVER" != $OCAMLVERSION ; then
            AC_MSG_RESULT(differs from ocamlc; ocamlopt.opt discarded.)
        else
            AC_MSG_RESULT(ok)
            OCAMLOPT=$OCAMLOPTDOTOPT
        fi
    fi
fi

# ocamlcp
AC_CHECK_PROG(OCAMLCP,ocamlcp,ocamlcp,no)
if test "$OCAMLCP" = no ; then
	AC_MSG_RESULT(Cannot find ocamlcp; no bytecode profiling.)
fi

if test "$OCAMLCP" != no ; then
   AC_MSG_CHECKING(ocamlcp version)
   TMPVER=`$OCAMLCP -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
   if test "$TMPVER" != $OCAMLVERSION ; then
      AC_MSG_RESULT(differs from ocamlc; ocamlcp discarded.)
      OCAMLCP = ""
   else
      AC_MSG_RESULT(ok)
   fi
fi

# ocamldep, ocamllex and ocamlyacc should also be present in the path
AC_CHECK_PROG(OCAMLDEP,ocamldep,ocamldep,no)
if test "$OCAMLDEP" = no ; then
        AC_MSG_ERROR(Cannot find ocamldep.)
fi

AC_CHECK_PROG(OCAMLLEX,ocamllex,ocamllex,no)
if test "$OCAMLLEX" = no ; then
        AC_MSG_ERROR(Cannot find ocamllex.)
fi

AC_CHECK_PROG(OCAMLYACC,ocamlyacc,ocamlyacc,no)
if test "$OCAMLYACC" = no ; then
        AC_MSG_ERROR(Cannot find ocamlyacc.)
fi

# latex, dvips
AC_CHECK_PROG(LATEX,latex,latex,no)
if test "$LATEX" = no ; then
    DOC_DVI=no
    LATEX=true
    BIBTEX=true
    echo "LaTeX not found; disabling dvi documentation."
else
    BIBTEX=bibtex
fi

AC_CHECK_PROG(PDFLATEX,pdflatex,pdflatex,no)
if test "$PDFLATEX" = no ; then
    PDFLATEX=true
    echo "pdfLaTeX not found; disabling pdf documentation."
fi

AC_CHECK_PROG(DVIPS,dvips,dvips,no)
if test "$DVIPS" = no ; then
    DOC_DVI=no
    DVIPS=true
    echo "dvips not found; disabling ps documentation."
fi   

# programs needed to produce the documentation
AC_CHECK_PROG(OCAMLWEB,ocamlweb,ocamlweb,no)
if test "$OCAMLWEB" = no ; then
    OCAMLWEB=true
    DOC_DVI=no
    DOC_HTML=no
    echo "ocamlweb not found; disabling documentation generation."
else
    DOC_DVI=yes
fi

AC_CHECK_PROG(HEVEA,hevea,hevea,no)
if test "$HEVEA" = no ; then
    DOC_HTML=no
    echo "HeVeA not found; disabling html documentation."
    HEVEA=true
    HACHA=true
else
    AC_CHECK_PROG(HACHA,hacha,hacha,no)
    if test "$HACHA" = no ; then
	DOC_HTML=no
	    echo "HaChA not found; disabling html documentation."
    else
	DOC_HTML=yes
    fi
fi

AC_ARG_WITH(latex-dir, [  ]--with-latex-dir=DIR where to find ocamlweb style file, LATEXDIR= -I $withval)

# searching install directory for emacs lisp files
# if someone has a better solution...
AC_ARG_WITH(emacs-dir, [  ]--with-emacs-dir=DIR install directory for emacs files, EMACSDIR=$withval,
    echo -n "Searching emacs lisp dir... "; \
    EMACSDIR=`emacs -batch -l emacs/find_path.el -f find-path \
		    2> /dev/null | \
              sed -n -e '/\/site-lisp/s/"//gp' | \
	      sed -n -e '/\/site-lisp/s/(//gp' | \
	      sed -n -e '/\/site-lisp/s/)//gp' | \
	      cut -f 1 -d\ `; \
	      if test "$EMACSDIR" = ""; then 
                echo "not found" 
              else
	        echo "$EMACSDIR"
	      fi)

# printing some information

if test "$prefix" = "NONE"; then
   prefix="/usr/local"
fi
if test "$exec_prefix" = "NONE"; then
   exec_prefix=$prefix
fi

prefix=`echo $prefix`
libdir=`echo $libdir`

echo
echo "  ** Configuration summary **"
echo
echo "Directories where Reactive-ML will be installed:"
eval "echo \"        binaries.................. $bindir\""
eval "echo \"        standard library.......... $libdir\""
eval "echo \"        manual.................... $mandir\""
if test "$EMACSDIR" != ""; then 
echo "        emacs files............... $EMACSDIR"
fi
echo

AC_SUBST(MAKE)
AC_SUBST(CPP)
AC_SUBST(INSTALL)
AC_SUBST(OCAMLC)
AC_SUBST(OCAMLOPT)
AC_SUBST(OCAMLDEP)
AC_SUBST(OCAMLLEX)
AC_SUBST(OCAMLYACC)
AC_SUBST(OCAMLCP)
AC_SUBST(OCAMLBEST)
AC_SUBST(OCAMLVERSION)
AC_SUBST(OCAMLLIB)

AC_SUBST(OCAMLWEB)
AC_SUBST(LATEX)
AC_SUBST(BIBTEX)
AC_SUBST(PDFLATEX)
AC_SUBST(DVIPS)
AC_SUBST(HEVEA)
AC_SUBST(HACHA)

AC_SUBST(LATEXDIR)
AC_SUBST(EMACSDIR)

AC_SUBST(OCAMLBEST)

AC_OUTPUT(config)
