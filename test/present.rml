
(*[N; O 2]*)
let process present_else act =
  signal s in
  present s then act 1 else act 2

(*[O 1]*)
let process present_then act =
  signal s in
  present s then act 1 else act 2
  ||
  emit s

(*[O 1]*)
let process present_then_2 act =
  signal s in
  emit s
  ||
  present s then act 1 else act 2

(*[N; O 2]*)
let process present_conf_else act =
  signal s1,s2 in
  emit s1
  ||
  present (s1 /\ s2) then act 1 else act 2

(*[O 1]*)
let process present_conf_then act =
  signal s1,s2 in
  emit s1
  ||
  emit s2
  ||
  present (s1 /\ s2) then act 1 else act 2


open Rmltest

let test =
  [ (present_else, "present_else", [N; O 2]);
    (present_then, "present_then", [O 1]);
    (present_then_2, "present_then_2", [O 1]);
    (present_conf_else, "present_conf_else", [N; O 2]);
    (present_conf_then, "present_conf_then", [O 1]) ]
