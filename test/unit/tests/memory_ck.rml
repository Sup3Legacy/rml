(* [O 1; O 3]*)
let process memory_update_ck act =
  newclock ck in
    memory s last 0 in
    s <<- (+) 1;
    pause ck;
    act !!s;
    s <<- (+) 2;
    pause topck;
    act !!s

(* [N; O 12]*)
let process memory_await_new_match_ck act =
  newclock ck in (
    memory s at ck last 0 in
    loop
      s <<- (+) 4;
      pause ck;
      s <<- (+) 4;
      pause topck
    end
    ||
    await new s(v) when v > 10 in act v
  )

(* [O 4; O 0] *)
let process memory_reset act =
  domain ck do
    memory s last 0 reset topck in
    s <<- (+) 4;
    pause ck;
    act !!s;
    pause topck;
    act !!s
  done

(* [O 4; O 3] *)
let process memory_reset_emit act =
  domain ck do
    memory s last 0 reset topck in
    s <<- (+) 4;
    pause ck;
    act !!s;
    pause topck;
    s <<- (+) 3;
    pause ck;
    act !!s
  done

open Rmltest

let test =
  [
   (memory_update_ck, "memory_update_ck",  [O 1; O 3]);
   (memory_await_new_match_ck, "memory_await_new_match_ck", [N; O 12]);
   (memory_reset, "memory_reset", [O 4; O 0]);
   (memory_reset_emit, "memory_reset_emit", [O 4; O 3])
  ]
