let (<<-) s f = emit s f
let (<==) s v = emit s (fun _ -> v)
let (!!) s = last s
let mem_gather f acc = f acc

(* [O 1; O 3]*)
let process memory_update_ck act =
  newclock ck in
    memory s default 0 gather mem_gather in
    s <<- (+) 1;
    pause ck;
    act !!s;
    s <<- (+) 2;
    pause topck;
    act !!s

(* [O 4; O 0] *)
let process memory_reset act =
  domain ck do
    memory s default 0 gather mem_gather reset topck in
    s <<- (+) 4;
    pause ck;
    act !!s;
    pause topck;
    act !!s
  done

(* [O 4; O 3] *)
let process memory_reset_emit act =
  domain ck do
    memory s default 0 gather mem_gather reset topck in
    s <<- (+) 4;
    pause ck;
    act !!s;
    pause topck;
    s <<- (+) 3;
    pause ck;
    act !!s
  done

open Rmltest

let test =
  [
   (memory_update_ck, "memory_update_ck",  [O 1; O 3]);
   (memory_reset, "memory_reset", [O 4; O 0]);
   (memory_reset_emit, "memory_reset_emit", [O 4; O 3])
  ]
