(* Auxiliary processes *)
let process counter act =
  let i = ref 0 in
  loop
    act !i; pause; incr i
  end

let process half s =
  loop
    emit s; pause; pause
  end


(* [S (O 0, O 1); O 2] *)
let process when_simple_ck act =
  domain ck do
    signal s in
    do
      run (counter act)
    when s done
    ||
    run (half s)
  by 3 done

(* [S (O 0, O 1); O 2; O 9] *)
let process when_until_ck act =
  signal s2 in
  pause; emit s2
  ||
  domain ck do
    signal s1 in
    do
      do
        run (counter act)
      when s1 done
    until s2 done;
    act 9
    ||
    run (half s1)
  by 3 done


(* [N; O 5] *)
let process when_await_ck act =
  signal s2 default 0 gather (+) in
  domain ck do
    signal s1 in
    do
      await s2(x) in act x
    when s1 done
    ||
    run (half s1)
    ||
    pause; emit s2 5
  by 3 done

(* [N; N; O 2] *)
let process when_await_ck2 act =
  signal s2 default 0 gather (+) in
  (domain ck do
    signal s1 in
    do
      await s2(x) in act x
    when s1 done
    ||
    loop
      emit s1; pause; pause
    end
  by 2 done)
  ||
  pause; emit s2 2

(* [N; N; O 2] *)
let process when_await_ck3 act =
  signal s2 default 0 gather (+) in
  (domain ck by 3 do
    signal s1 in
    do
      await s2(x) in act x
    when s1 done
    ||
    loop
      emit s1; pause; emit s1; pause
    end
  done)
  ||
  pause; emit s2 2

open Rmltest

let test =
  [ (when_simple_ck, "when_simple_ck", [S (O 0, O 1); O 2]);
    (when_until_ck, "when_until_ck", [S (O 0, O 1); O 2; O 9]);
    (when_await_ck, "when_await_ck", [N; O 5]);
    (when_await_ck2, "when_await_ck2", [N; N; O 2]);
    (when_await_ck3, "when_await_ck3", [N; N; O 2]);
  ]
