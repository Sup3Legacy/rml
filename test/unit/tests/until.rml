
(*[O 1; O 2; O 8]*)
let process until_simple act =
  signal s in
  do
   loop
     act 1; pause; act 2; pause
   end
  until s done;
  act 8
  ||
  pause; emit s

(*[O 1; S (O 2, O 8)]*)
let process until_done act =
  signal s in
  do
    act 1; pause; act 2
  until s done;
  act 8
  ||
  pause; pause; emit s


(*[O 1; O 2; S(O 3, O 8)]*)
let process until_handler act =
  signal s default 0 gather (+) in
  do
   loop
     act 1; pause; act 2; pause
   end
  until s(x) -> act x done;
  act 8
  ||
  pause; emit s 3

(*[O 1; O 2; S(O 3, O 8)]*)
let process until_handler_match act =
  signal s default 0 gather (+) in
  do
   loop
     act 1; pause; act 2; pause
   end
  until s(3) -> act 3 done;
  act 8
  ||
  emit s 0; pause; emit s 3

(*[O 1; O 2; O 3; N]*)
let process until_nested act =
  signal s1, s2 in
  do
    do
      loop
        act 1; pause; act 2; pause
      end
    until s1 done;
    act 9
  until s2 done;
  act 3
  ||
  pause; emit s2; pause; emit s1

(* [O 1; O 2; O 5] *)
let process until_await act =
  signal s1, s2 in
  do
    loop
      act 1; pause; act 2; pause
    end
    ||
    await s1; act 9
  until s2 done;
  act 5
  ||
  pause; emit s2; pause; emit s1

(* [O 1; O 2; O 5] *)
let process until_await_2 act =
  signal s1, s2 in
  do
    loop
      act 1; pause; act 2; pause
    end
    ||
    await s1; act 9
  until s2 done;
  act 5
  ||
  pause; emit s2; emit s1

(* [O 1; P [O 2; O 4]; O 5] *)
let process until_await_immediate act =
  signal s1, s2 in
  do
    loop
      act 1; pause; act 2; pause
    end
    ||
    await immediate s1; act 4
  until s2 done;
  act 5
  ||
  pause; emit s2; emit s1

(* [O 0; O 1; O 2; S(O 0; O 3)] *)
let process until_loop act =
  signal abort in
  signal s default 0 gather (+) in
  loop
    do
      act 0;
      await s(v1) in
      act v1;
      await s(v2) in
      act v2
    until abort -> act 10 done
  end
  ||
  emit s(1);
  pause;
  emit s(2);
  pause;
  emit s(3)

(* [O 0; O 1; S(O 10, O 0); N; O 3; N] *)
let process until_loop2 act =
  signal abort in
  signal s default 0 gather (+) in
  loop
    do
      act 0;
      await s(v1) in
      act v1;
      await s(v2) in
      act (v2 + 1)
    until abort -> act 10 done
  end
  ||
  emit s(1);
  pause;
  emit abort;
  pause;
  pause;
  emit s(3)


open Rmltest

let test =
  [ (until_simple, "until_simple", [O 1; O 2; O 8]);
    (until_done, "until_done", [O 1; P [O 2; O 8]]);
    (until_handler, "until_handler", [O 1; O 2; S(O 3, O 8)]);
    (until_handler_match, "until_handler_match", [O 1; O 2; S(O 3, O 8)]);
    (until_nested, "until_nested", [O 1; O 2; O 3; N]);
    (until_await, "until_await", [O 1; O 2; O 5]);
    (until_await_2, "until_await_2", [O 1; O 2; O 5]);
    (until_await_immediate, "until_await_immediate", [O 1; P [O 2; O 4]; O 5]);
    (until_loop, "until_loop", [O 0; O 1; S(O 2, O 0); O 3]);
    (until_loop2, "until_loop2", [O 0; O 1; S(O 10, O 0); N; O 3; N]) ]
