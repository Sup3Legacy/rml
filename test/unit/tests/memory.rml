let (<<-) s f = emit s f
let (<==) s v = emit s (fun _ -> v)
let (!!) s = last s
let mem_gather f acc = f acc

(* [N; O 1; O 3]*)
let process memory_update act =
  memory s default 0 gather mem_gather in
  s <<- (+) 1;
  pause;
  act !!s;
  s <<- (+) 2;
  pause;
  act !!s

(* [N; O 1; O 3; O 3]*)
let process memory_set act =
  memory s default 0 gather mem_gather in
  s <== 1;
  pause;
  act !!s;
  s <== 3;
  pause;
  act !!s;
  pause;
  act !!s

(* [N; O 1; O 3] *)
memory mglob default 0 gather mem_gather
let process memory_global act =
  mglob <<- (+) 1;
  pause;
  act !!mglob;
  mglob <<- (+) 5;
  pause;
  act !!mglob

open Rmltest

let test =
  [
   (memory_update, "memory_update",  [N; O 1; O 3]);
   (memory_set, "memory_set",  [N; O 1; O 3; O 3]);
   (memory_global, "memory_global", [N; O 1; O 6]);
  ]
