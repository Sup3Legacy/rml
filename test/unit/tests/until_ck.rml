(* [S(O 1, S(O 2, O 8))] *)
let process until_simple_ck act =
  newclock ck in
  signal s in
  do
   loop
     act 1; pause; act 2; pause topck
   end
  until s done;
  act 8
  ||
  pause; emit s

(* [S(O 1, S(O 2, S(O 3, O 8)))] *)
let process until_handler_ck act =
  newclock ck in
  signal s default 0 gather (+) in
  do
   loop
     act 1; pause; act 2; pause topck
   end
  until s(x) -> act x done;
  act 8
  ||
  pause; emit s 3

(* [S(O 1, O 2); S(O 1, O 2); O 8] *)
let process until_slow act =
  signal s in
   pause; emit s
  ||
  newclock ck in
   do
     loop
       act 1; pause; act 2; pause topck
     end
   until s done;
   act 8

(* [S(O 1, O 2); S(O 1, O 2); S(O 3, O 8)] *)
let process until_handler_slow act =
  signal s default 0 gather (+) in
   pause; emit s 3
  ||
  newclock ck in
   do
     loop
       act 1; pause; act 2; pause topck
     end
   until s(x) -> act x done;
   act 8


(* [S(O 1, O 2); S(O 1, O 2); S(O 3, O 8)] *)
let process until_handler_match_slow act =
  signal s default 0 gather (+) in
   emit s 1; pause; emit s 3
  ||
  newclock ck in
   do
     loop
       act 1; pause; act 2; pause topck
     end
   until s(3) -> act 3 done;
   act 8

(* [S(O 1, S(O 2, O 3)); S(S(O 1, O 2), O 9) ] *)
let process until_nested_clocks act =
  newclock ck1 in
    signal s at ck1 in
    pause topck; emit s
    ||
    newclock ck2 in
      do
        loop
          act 1; pause ck2; act 2; pause ck1; act 3; pause topck
        end
      until s -> act 9 done

open Rmltest

let test =
  [ (until_simple_ck, "until_simple_ck", [S(O 1, S(O 2, O 8))]);
    (until_handler_ck, "until_handler_ck", [S(O 1, S(O 2, S(O 3, O 8)))]);
    (until_slow, "until_slow", [S(O 1, O 2); S(O 1, O 2); O 8]);
    (until_handler_slow, "until_handler_slow", [S(O 1, O 2); S(O 1, O 2); S(O 3, O 8)]);
    (until_handler_match_slow, "until_handler_match_slow",
         [S(O 1, O 2); S(O 1, O 2); S(O 3, O 8)]);
    (until_nested_clocks, "until_nested_clocks", [S(O 1, S(O 2, O 3)); S(S(O 1, O 2), O 9)])
  ]
