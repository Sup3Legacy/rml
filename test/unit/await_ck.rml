(* [O 0] *)
let process await_match_ck act =
  newclock ck in
    signal s default 0 gather (+) in
    emit s 0
    ||
    await s(0) in act 0

(* [O 0; O 0] *)
let process await_match_both act =
  (
   signal s default 0 gather (+) in
   emit s 0
   ||
   await s(0) in act 0
  )
  ||
  (
   newclock ck in
     signal s default 0 gather (+) in
     emit s 0
     ||
     await s(0) in act 0
  )

(* let ck = S (O 0, S (O 1, O 2)) in [ck; P [ck; O 8; O 5]] *)
let process await_match_slow act =
  signal s default 0 gather (+) in
  emit s 0; pause; act 8
  ||
  newclock ck in
    (loop
      act 0; pause; act 1; pause; act 2; pause topck
    end
    ||
    await s(0) in act 5)

(* let ck = S (O 0, S (O 1, O 2)) in [P [ck; O 5]; P [ck; O 8]] *)
let process await_match_fast act =
  pause; act 8
  ||
  newclock ck in
  signal s default 0 gather (+) in
    (loop
      act 0; pause; act 1; pause; act 2; pauseclock ck
    end
    ||
    (await s(0) in act 5)
    ||
    (pause; emit s 0))


(* [N; O 0] *)
let process await_immediate_ck act =
  newclock ck in (
    signal s in
    pause; pause; pauseclock ck;emit s
    ||
    await immediate s; act 0
  )

(* [N; S(O 1, O 2); P[O 4; S(O 1, O 2)]; P[O 4; S(O 1, O 2)] ] *)
let process await_sigat act =
  newclock ck in
    signal s at topck default 0 gather (+) in
    loop
      await s(v) in act v
    end
    ||
    loop
      pause topck; act 1; pause ck; act 2; emit s 4
    end

(* [N; S(O 1, O 2); P[O 4; S(O 1, O 2)]; P[O 4; S(O 1, O 2)] ] *)
let process await_sigat2 act =
 newclock c in (
  newclock ck in
    signal s at topck default 0 gather (+) in
    loop
      await s(v) in act v
    end
    ||
    loop
      pause topck; act 1; pause ck; act 2; emit s 4
    end
 )

(* [N; S(O 1, O 2); P[O 4; S(O 1, O 2)]; P[O 4; S(O 1, O 2)] ] *)
let process await_sigat_restrict act =
  newclock ck in
    signal s at topck restrict ck default 0 gather (+) in
    loop
      await s(v) in act v
    end
    ||
    loop
      pause topck; act 1; pause ck; act 2; emit s 4
    end

(* [N; S(O 1, O 2); P[O 4; S(O 1, O 2)]; P[O 4; S(O 1, O 2)] ] *)
let process await_sigat_restrict2 act =
 newclock c in (
  newclock ck in
    signal s at topck default 0 gather (+) in
    loop
      await s(v) in act v
    end
    ||
    loop
      pause topck; act 1; pause ck; act 2; emit s 4
    end
 )


open Rmltest

let test =
  let ck = S (O 0, S (O 1, O 2)) in
  [ (await_match_ck, "await_match_ck",  [O 0]);
    (await_match_both, "await_match_both", [O 0; O 0]);
    (await_match_slow, "await_match_slow", [ck; P [ck; O 8; O 5]]);
    (await_match_fast, "await_match_fast", [P [ck; O 5]; P [ck; O 8]]);
    (await_immediate_ck, "await_immediate_ck", [N; O 0]);
    (await_sigat, "await_sigat", [N; S(O 1, O 2); P[O 4; S(O 1, O 2)]; P[O 4; S(O 1, O 2)] ]);
    (await_sigat2, "await_sigat2", [N; S(O 1, O 2); P[O 4; S(O 1, O 2)]; P[O 4; S(O 1, O 2)] ]);
    (await_sigat_restrict, "await_sigat_restrict", [N; S(O 1, O 2); P[O 4; S(O 1, O 2)]; P[O 4; S(O 1, O 2)] ]);
    (await_sigat_restrict2, "await_sigat_restrict2", [N; S(O 1, O 2); P[O 4; S(O 1, O 2)]; P[O 4; S(O 1, O 2)] ]);
  ]
