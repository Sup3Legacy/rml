#!/bin/bash

VERBOSE=1

LOG_FILE=test_log.txt

COMPILER_FILE=rpmlc.byte
COMPILER_DIR=../../compiler
COMPILER_OPTIONS=""

OCAMLC=ocamlc
OCAMLC_OPTIONS="-g -I ../../interpreter/_build -I ../../lib/ unix.cma rpmllib.cma"

OCAMLBUILD=ocamlbuild

MPIEXEC=mpiexec
MPIEXEC_OPTIONS="-l -n 4"

load_balancers=("local" "robin" "user_local" "user_robin" "remote")
RUNTIME_OPTIONS=""

build_compiler () {
    cd $COMPILER_DIR
    ocamlbuild $COMPILER_FILE >/dev/null 2>&1
    cd -
}

compile () {
    if [ $VERBOSE ]; then
        echo "    ** Building $1"
    fi
    #$COMPILER_DIR/$COMPILER_FILE -I ../../lib -t test $1.rml >/dev/null 2>&1 && $OCAMLC $OCAMLC_OPTIONS $1.ml >/dev/null 2>&1
    $OCAMLBUILD $1.rml.byte >/dev/null 2>&1

    rc=$?
    if [ $rc != 0 ]; then
        echo "Error building test $1";
        exit $rc
    fi
}

clean() {
    echo "Cleaning build dir"
    $OCAMLBUILD -clean >/dev/null 2>&1
    rm *.byte >/dev/null 2>&1
}

check() {
    echo "Building compiler"
   # build_compiler

    echo "Starting tests"

    for f in *.rmlsim ; do
        bn=`basename $f .rmlsim`
        if [ $VERBOSE ]; then
            echo "  ** Test $bn:"
        fi

        compile $bn
        if [ $VERBOSE ]; then
            echo "    ** Launching $bn"
        fi
        if $MPIEXEC $MPIEXEC_OPTIONS ./$bn.rml.byte $RUNTIME_OPTIONS $1 >/dev/null 2>&1; then
            {
                if [ $VERBOSE ]; then
                    echo "    ** Test $bn passed successfully"
                fi
            }

        else
            echo "!!!!!!!! Test $bn failed !!!!!!!!!"
            exit 1
        fi
    done

    clean
    echo "All tests OK"
}


# body of the script
while [ $# -gt 0 ]; do
  case $1 in
      "-v" )
          VERBOSE=1
          shift;;
      *)
          echo "Unknown option $1"
          exit
  esac
done

for balancer in ${load_balancers[@]}; do
    echo "******* Testing with '$balancer' load balancer *********"
    check "-load-balancer $balancer"
    echo ""
done
