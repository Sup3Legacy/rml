(* minimalistic newclock *)
(*[O 0]*)
let process ck_one_step act =
  newclock ck in
    pause ck; act 0

(* end of macro step with pauseclock *)
(* let ck = S (O 0, S (O 1, O 2)) in  [ck; ck] *)
let process ck_macro_pauseck act =
  (newclock ck in
    loop
      act 0; pause; act 1; pause; act 2; pauseclock ck
    end)

(* end of macro step with pause on topck *)
(* let ck = S (O 0, S (O 1, O 2)) in  [ck; ck] *)
let process ck_macro_pause_topck act =
  (newclock ck in
    loop
      act 0; pause; act 1; pause; act 2; pause topck
    end)

(* end of macro step with await on slow signal*)
(* [N; N; O 5] *)
let process ck_macro_await_slow act =
  signal s default 0 gather (+) in
  pause; emit s 0
  ||
  newclock ck in
    await s(0) in act 5

(* let ck = S (O 0, S (O 1, O 2)) in  [P [ck; O 8]; P [ck; O 7]] *)
let process ck_macro_pauseck_par act =
  (newclock ck in
    loop
      act 0; pause; act 1; pause; act 2; pauseclock ck
    end)
  ||
  loop
    act 8; pause; act 7; pause
  end

(* let ck = S (O 0, S (O 1, O 2)) in [ck; ck; P[ck; O 5]] *)
let process ck_macro_multi act =
  signal s default 0 gather (+) in
  pause; emit s 0
  ||
  newclock ck in
   ((await s(0) in act 5)
   ||
   loop
     act 0; pause; act 1; pause; act 2; pause topck
   end)

(* [N; O 3] *)
let process ck_macro_nested act =
  signal s default 0 gather (+) in
  emit s 3
  ||
  newclock ck1 in (
    newclock ck2 in
      await s(v) in act v
  )

(* S (O 0, S (O 1, O 2)) *)
let process ck_done act =
  (newclock ck in
    act 0; pause; act 1);
  act 2


open Rmltest

let test =
  let ck = S (O 0, S (O 1, O 2)) in
   [  (ck_one_step, "ck_one_step", [O 0]);
     (ck_macro_pauseck_par, "ck_macro_pauseck_par", [P [ck; O 8]; P [ck; O 7]]);
     (ck_macro_pauseck, "ck_macro_pauseck", [ck; ck]);
     (ck_macro_await_slow, "ck_macro_await_slow", [N; N; O 5]);
     (ck_macro_multi, "ck_macro_multi", [ck; ck; P[ck; O 5]]);
     (ck_macro_pause_topck, "ck_macro_pause_topck", [ck; ck]);
     (ck_macro_nested, "ck_macro_nested", [N; O 3]);
     (ck_done, "ck_done", [ck])  ]
