(* [P [O 2; O 3]; O 1; O 2] *)
let process par_seq act =
  ((act 2; pause) || (act 3; pause));
  act 1; pause; act 2

(* [O 8; O 7; O 8] *)
let process simple_loop act =
  loop
    act 8; pause; act 7; pause
  end

(* [N; O 0] *)
let process await_match act =
  signal s default 0 gather (+) in
  emit s 0
  ||
  await s(0) in act 0

(* [N; O 0] *)
let process await_norm act =
  signal s in
  emit s
  ||
  await s; act 0

(* [N; O 8] *)
let process await_all act =
  signal s default 0 gather (+) in
  emit s 5
  ||
  emit s 3
  ||
  await s(v) in act v

(* [N; N; O 0] *)
let process await_immediate act =
  signal s in
  pause; pause; emit s
  ||
  await immediate s; act 0

(* [O 0] *)
let process await_immediate_2 act =
  signal s in
    await immediate s; act 0
    ||
    emit s

(* [N; N; O 9] *)
let process await_immediate_one act =
  signal s in
  pause; pause; emit s 9
  ||
  await immediate one s(v) in act v

(* [N; N; N; O 9] *)
let process await_one act =
  signal s in
  pause; pause; emit s 9
  ||
  await one s(v) in act v

(* this test launches a lot of awair simultaneously to try
   all interleavings in a parallel backend*)
(* [O 2] *)
let process many_await act =
  signal s in
    loop
      for i = 1 to 1000 dopar
        if i mod 565 = 109 then
          emit s
        else
          await immediate s
      done;
      act 2; pause
    end

open Rmltest
open Rmltest_utils

let process test =
  run (Rmltest.test "par_seq" par_seq [P [O 2; O 3]; O 1; O 2])
  ||
  run (Rmltest.test "simple_loop" simple_loop [O 8; O 7; O 8])
  ||
  run (Rmltest.test "await_match" await_match [N; O 0])
  ||
  run (Rmltest.test "await_norm" await_norm [N; O 0])
  ||
  run (Rmltest.test "await_all" await_all [N; O 8])
  ||
  run (Rmltest.test "await_immediate" await_immediate [N; N; O 0] )
  ||
  run (Rmltest.test "await_immediate_2" await_immediate_2 [O 0] )
  ||
  run (Rmltest.test "await_immediate_one" await_immediate_one [N; N; O 9] )
  ||
  run (Rmltest.test "await_one" await_one [N; N; N; O 9] )
  ||
  run (Rmltest.test "many_await" many_await [O 2] )
