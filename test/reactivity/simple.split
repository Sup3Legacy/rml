$$$good
${
(*
  run_test:
   [
    Good: "../../compiler/rpmlc.byte -I ../../lib/ -c -dwarn_error"
   ]
*)

$}


let process p = pause; pause; print_endline "Done"

$

let process p = loop pause end

$

let process p q = loop run q end

$

let rec process p = pause; run p

$

let rec process p =
  let process q = run p in
  ()

$

let rec process p s =
 do
   pause
 until s -> run (p s) done

$$$bad
${
(*
  run_test:
   [
    Bad 2 "": "../../compiler/rpmlc.byte -I ../../lib/ -c -dwarn_error"
   ]
*)

$}

let process p =
  loop
    print_endline "Coucou"
  end

$$$good_unify
${
(*
  run_test:
   [
    Good: "../../compiler/rpmlc.byte -I ../../lib/ -c -dwarn_error -dno_clock_effects"
   ]
*)

$}

let process p = pause; print_endline "Coucou"
let process q = pause; print_endline "Bli" || pause

let process pp =
  let r = ref p in
  r := q;
  loop
    pause;
    run !r
  end

$

let rec process p4 q1 q2 q3 q4 =
 (run q1 ; run q2 ; run q3 ; run q4);
 run (p4 q2 q3 q4 q1)

let process pause_par_eps =
 pause || ()

let process test_p4 =
 run (p4 pause_par_eps pause_par_eps pause_par_eps pause_par_eps)
