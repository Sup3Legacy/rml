$$$good
${
(*
  run_test:
   [
    Good: "../../compiler/rpmlc.byte -I ../../lib/ -c -dwarn_error"
   ]
*)

$}


let process p =
  loop
    print_endline "Bli";
    pause
  end

$

let process q = print_endline "Bli"; pause

let process p =
  loop
    run q
  end

$

let process p =
  signal s in
  loop
    await s(v) in
    ignore v
  end

$

let process p =
  signal s in
  loop
    await s(v) in
    ignore v; ignore v
  end

$


let process p =
  signal s in
  loop
    await one s(v) in
    ignore v; ignore v
  end

$

let process p =
  loop
    loop
      pause;
    end
  end

$

let process p q =
  loop
    run q
  end

let process pp = pause; print_endline "Coucou"

let process m = run p pp

$

let process p =
  signal s in
  loop
    present s then pause else ()
  end

$

let process main =
  signal s default (process (pause)) gather (fun x _ -> x) in
  loop
    await s(p) in
    loop run p end
  end
  ||
  let rec process p = pause; run p in
  emit s p

$

let process p = pause; print_endline "Coucou"
let process q = pause; print_endline "Bli" || pause

let process pp =
  let r = ref p in
  r := q;
  loop
    run !r
  end

$$$bad
${
(*
  run_test:
   [
    Bad 2 "loop": "../../compiler/rpmlc.byte -I ../../lib/ -c -dwarn_error"
   ]
*)

$}

let process p =
  loop
    print_endline "Coucou"
  end

$
let process q = print_endline "Coucou"

let process p =
  loop
    run q
  end

$

let process p =
  loop
    print_endline "hello" || print_endline "world"
  end

$

let process p =
  loop
    print_endline "Hello "; print_endline "world"
  end

$

let process p =
  loop
    loop
      print_endline "Coucou"
    end
  end

$

let process p q =
  loop
    run q
  end

let process pp = print_endline "Coucou"

let process m = run p pp

$

let process p =
  loop
    if true then () else pause
  end

$

let process main =
  signal s default (process (pause)) gather (fun x _ -> x) in
  loop
    await s(p) in
    loop run p end
  end
  ||
  emit s (process ())