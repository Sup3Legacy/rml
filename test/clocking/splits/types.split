$$$good
${
(*
  run_test:
   [
     Good: "../../compiler/rpmlc.byte -I ../../lib/ -c"
   ]
*)

$}

type 'a siglist{'ck|} = ('a, 'a) event{'ck|} list

$

type 'a siglist{'ck|} = { s_list : ('a, 'a) event{'ck|} list }


let f ck =
  signal s at ck default 0 gather (+) in
  { s_list = [s] }


$

type witheff = { f: int => int }

let process p =
  signal s default 0 gather (+) in
  { f = (fun i -> emit s i; 0) }, { f = (fun x -> x) }


$

type witheff = { f: witheff => int }

$

type t1 = { f: t2 => int }
and t2 = t1 process

$

type witheff = { f: witheff => int }

type t = { l1 : witheff; l2 : witheff }

$

let rec iter f l = match l with
  | [] -> ()
  | x::l -> (f x); (iter f l)


let p l =
  iter (fun s -> emit s) l

$$$bad
${
(*
  run_test:
   [
     Bad 2 "": "../../compiler/rpmlc.byte -I ../../lib/ -c"
   ]
*)

$}

type noeff = { f: int -> int }

let process p =
  signal s default 0 gather (+) in
  { f = (fun i -> emit s i; 0) }
