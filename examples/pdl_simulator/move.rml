open Global

let random node = 
  node.node_pos <- translate node.node_pos (Random.int 8) 1

let same_dir n dir =
  let p = Random.int 100 in
  if p < 80 then 
    ();
  if 80 <= p & p < 85 then 
    dir := (!dir + 1) mod 8;
  if 85 <= p & p < 90 then 
    dir := (!dir + 7) mod 8;
  if 90 <= p & p < 92 then 
    dir := (!dir + 2) mod 8;
  if 92 <= p & p < 94 then 
    dir := (!dir + 6) mod 8;
  if 94 <= p & p < 96 then 
    dir := (!dir + 3) mod 8;
  if 96 <= p & p < 98 then 
    dir := (!dir + 5) mod 8;
  if 98 <= p & p < 100 then 
    dir := (!dir + 4) mod 8;
  n.node_pos <- translate n.node_pos !dir 1


let random_waypoint r n dest =
  if (n.node_pos.x = !dest.x) & (n.node_pos.y = !dest.y) then
    (let x = n.node_pos.x + Random.int (2*r) - r in
    let y = n.node_pos.y + Random.int (2*r) - r in
    dest := 
      make_pos 
	(if x < 0 then 0 else if x >= !max_x then !max_x - 1 else x)
	(if y < 0 then 0 else if y >= !max_y then !max_y - 1 else y));
  
  if n.node_pos.x < !dest.x then
    if n.node_pos.y < !dest.y then
      n.node_pos <- translate n.node_pos 1 1
    else
      if n.node_pos.y > !dest.y then
	n.node_pos <- translate n.node_pos 3 1
      else 
	n.node_pos <- translate n.node_pos 2 1
  else 
    if n.node_pos.x > !dest.x then
      if n.node_pos.y < !dest.y then
	n.node_pos <- translate n.node_pos 7 1
      else
	if n.node_pos.y > !dest.y then
	  n.node_pos <- translate n.node_pos 5 1
	else
	  n.node_pos <- translate n.node_pos 6 1
    else
      if n.node_pos.y < !dest.y then
	n.node_pos <- translate n.node_pos 0 1
      else
	if n.node_pos.y > !dest.y then
	  n.node_pos <- translate n.node_pos 4 1



let no_move n = ()

let move n =
  match n.node_mvt_kind with
  | Mvt_random -> random n
  | Mvt_same_dir dir -> same_dir n dir
  | Mvt_random_waypoint pos -> random_waypoint 200 n pos
  | Mvt_no_move -> no_move n
