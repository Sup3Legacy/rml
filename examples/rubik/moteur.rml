
type coord =
{
 x : float;
 y : float;
 z : float;
};; 

type axe = X | Y | Z | No

(********************************************)
(********************************************)
(*** Fonctions de manipulation de points  ***)
(********************************************)
(********************************************)

(* additionne deux points *)
let coord_p p1 p2 = {x = p1.x +. p2.x;
                     y = p1.y +. p2.y;
                     z = p1.z +. p2.z};;

let (+..) = coord_p;;

(* soustrait deux points *)
let coord_m p1 p2 = {x = p1.x -. p2.x;
                     y = p1.y -. p2.y;
                     z = p1.z -. p2.z};;

let (-..) = coord_m;;

(* produit scalaire *)

let scalar p1 p2 = (p1.x *. p2.x) +. (p1.y *. p2.y) +. (p1.z *. p2.z);;



(* projecte un point sur l'ecran et rend le couple (x,y) correspondant *)

let dist_oeil = 400.;;
let prof_z = 50.;;

let project p max_x_2 max_y_2 =
 (int_of_float ((p.x *. dist_oeil) /. (dist_oeil +. prof_z -. p.z)) + max_x_2) ,
 (int_of_float ((p.y *. dist_oeil) /. (dist_oeil +. prof_z -. p.z)) + max_y_2);;


(* effectue la rotation de 90 deg selon l'axe *)

let rotation_axe sens axe =
   match axe with
   | X ->(function p -> {x = p.x;
	                 y = -. (sens *. p.z);
			 z = sens *. p.y}
	 )
   | Y ->(function p -> {x = -. (sens *. p.z);
	                 y = p.y ;
			 z = sens *. p.x}
	 )
   | Z ->(function p -> {x = -. (sens *. p.y);
	                 y = sens *. p.x ;
			 z = p.z}
	 )
   | No ->(function p -> p);;


(* effectue la rotation selon un degre suivant un axe *)
let rotation_deg deg axe =
      let cs = (cos deg) and sn = (sin deg) in
      match axe with
      | X ->(function p -> {x = p.x;
                            y = (p.y*.cs) -. (p.z*.sn);
                            z = (p.z*.cs) +. (p.y*.sn)}
            )
      | Y ->(function p -> {x = (p.x*.cs) -. (p.z*.sn);
                            y = p.y;
                            z = (p.z*.cs) +. (p.x*.sn)}
            )
      | Z ->(function p -> {x = (p.x*.cs) -. (p.y*.sn);
                            y = (p.y*.cs) +. (p.x*.sn);
                            z = p.z}
            )
      | No ->(function p -> p);;


let rotation_xy deg1 deg2 =
   let cs1 = cos deg1 and sn1 = sin deg1 and
       cs2 = cos deg2 and sn2 = sin deg2 in
         fun p -> {x = p.x *. cs1 -. p.y *. sn1 *. sn2
	                          -. p.z *. sn1 *. cs2;
                   y = p.y *. cs2 -. p.z *. sn2;
                   z = p.x *. sn1 +. p.y *. sn2 *. cs1
		                  +. p.z *. cs1 *. cs2
                  };;


let tourne_face rotfunc (lp,pos,color) =
    (Array.map rotfunc lp, rotfunc pos,color);;

      (* effectue la rotation d'un cube *)

let tourne_cube rotfunc (lf,pos) =
    (Array.map (tourne_face rotfunc) lf, rotfunc pos);;
	    






(* obtient la position de la souris *)

let get_mouse_pos() =
  let status = Graphics.wait_next_event [Graphics.Poll] in
  let max_x_2 = (Graphics.size_x()) / 2 in
  let max_y_2 = (Graphics.size_y()) / 2 in
  let mouse_x = status.Graphics.mouse_x - max_x_2 and
      mouse_y = status.Graphics.mouse_y - max_y_2 in
  if (abs mouse_x < max_x_2) && (abs mouse_y < max_y_2) then
        {x = float_of_int mouse_x;
         y = float_of_int mouse_y;
         z = 0.0;}
  else
        {x= 0.;y=0.;z=1.} ;;


let get_key() = Graphics.read_key();;


let color_of_int = function
  | 0 -> Graphics.rgb   0   0   0  (* noir    *)
  | 1 -> Graphics.rgb   0   0 192  (* bleu    *)
  | 2 -> Graphics.rgb   0 204   0  (* vert    *)
  | 3 -> Graphics.rgb 250 250 250  (* blanc   *)
  | 4 -> Graphics.rgb 150   0   0  (* bordeau *)
  | 5 -> Graphics.rgb 255  89  65  (*  63   0   (* rose orange *)  *)
  | 6 -> Graphics.rgb 255 240   0  (* jaune   *)
  | _ -> Graphics.rgb 128 128   0;;





let maj_aff =
  let faceisvisible normal pos rot_cube =
     let pos_real = normal +.. (rot_cube pos)
                      -..  {x= 0. ;y= 0. ;z= dist_oeil +. prof_z} in
         scalar normal pos_real < 0. in
  fun all rotx roty ->
  let max_x_2 = (Graphics.size_x()) / 2 in
  let max_y_2 = (Graphics.size_y()) / 2 in
  let affiche_cube (lf,pos) rot_cube =
     Array.iter
       (fun (lp,norm,color) ->
          if color != 0  then
	    let norm = rot_cube norm in
            if faceisvisible norm pos rot_cube then
            ( let pointarray = (Array.map (fun x ->
                                             project (rot_cube (coord_p x pos))
                                                     max_x_2 max_y_2
                                          )
                                          lp
                               ) in
              Graphics.set_color (color_of_int (color mod 7));
              Graphics.fill_poly pointarray;
              Graphics.set_color (color_of_int 0);
	      Graphics.draw_poly pointarray;
(*              Graphics.moveto (fst pointarray.(0)) (snd pointarray.(0));
            Array.iter (function (x,y) -> Graphics.lineto x y) pointarray;
              (function (x,y) -> Graphics.lineto x y)  pointarray.(0); *)
            );
       )
       lf in
  Graphics.clear_graph();
(*  Graphics.set_color Graphics.blue;*)
  List.iter (fun e -> affiche_cube e (rotation_xy rotx roty)) all;
;;


(******************************************************)
let fenetre =
(*----------------------------------------------------*)
(* machine read_click [a_click]                       *)
(*----------------------------------------------------*)
     let rec process read_click button_p pos_p a_click a_move =
      let button = Graphics.button_down() in
      let pos    = get_mouse_pos () in
      (if button_p then
         (if not button then
	       emit a_click (pos)
	  else
               emit a_move (pos_p -.. pos)
	 )
       else
          emit a_move ({x=0.;y=0.;z=0.})
      );
      pause;
      run (read_click button pos a_click a_move)
  in

(*-----------------------------------------------------*)
(* machine read_key []                                 *)
(*-----------------------------------------------------*)
  let process read_key clavier =
    loop
      if Graphics.key_pressed() then
         emit clavier (get_key ())
      else
         nothing;
      pause
    end
  in
  fun clic clavier graph a_move rot_rubik ->
    process 
      begin
	Graphics.open_graph "";
	Graphics.auto_synchronize false;
	begin
	  loop
	    await graph (all) in
	    await one rot_rubik (rot) in
	    maj_aff all (fst rot) (snd rot);
	    Graphics.synchronize ()
	  end
	  ||
	  run (read_click false (get_mouse_pos ()) clic a_move)
	  ||
	  run (read_key clavier)
	end
      end

