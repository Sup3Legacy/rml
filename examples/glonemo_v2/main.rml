open Definitions
open Print
open Mac
open Routing
open Energy
open Graphic
open Application
open Environment


let process check_energy self kill_node =
  loop
    if self.node_energy <= 0.0 then emit kill_node;
    pause
  end

let process mac_node self =
  run (alternance self)
  ||
  run (attente self)
  ||
  run (mac_ctrl self)
  ||
  run (consume_energy self)


let process network_node self =
  run (receive_interest self)
  ||
  run (send_interest self)


let which_nodes (node_tab : neighbor array) =
  let f nod =
    ((nod.neighbor_pos).x < 1000.0) && ((nod.neighbor_pos).y > 0.0)
  in
  List.map (fun n -> n.neighbor_id)
    (List.filter f (Array.to_list (node_tab)));;


let nodes =
  ref (Array.init number_of_nodes (fun i -> make_neighbor i (random_pos())))

(*
let init =
  compute_neighbors nodes;
  sink_of_node nodes.(1);
  make_interest (nodes.(1)) (which_nodes nodes);;
*)

let process node_body state cloud_pos draw =
  signal kill_node in
  do
    run (application_interest state cloud_pos)
    ||
    run (network_node state)
    ||
    run (mac_node state)
    ||
    run (check_energy state kill_node)
  until kill_node done
  ||
  if !Init.with_graphics then
    loop
      emit draw (info state);
      pause
    end


let process node me neighbors cloud_pos draw =
  let state =
    make_node
      me.neighbor_id me.neighbor_pos
      me.neighbor_mac_channel me.neighbor_activation
      neighbors
  in
  run (node_body state cloud_pos draw)

let process sink me neighbors cloud_pos nodes draw =
  let state =
    make_node
      me.neighbor_id me.neighbor_pos
      me.neighbor_mac_channel me.neighbor_activation
      neighbors
  in
  sink_of_node state;
  make_interest state (which_nodes nodes);
  run (node_body state cloud_pos draw)

signal nodes_info;;

(************************************************************)
(* Programme principale *)
let process main =
  signal cloud_x, cloud_y default 0.0 gather (+.) in
  signal wind_x, wind_y default 0.0 gather (+.) in
  signal kill_node in
  signal kill_cloud in
  signal add in
  let neighbors = compute_neighbors !nodes in
  begin
    begin
      emit cloud_x 400.0;
      emit cloud_y 400.0;
      if !Init.with_cloud then
        do
	  run (wind () (wind_x, wind_y))
	  ||
	  run (nuage (wind_x, wind_y) (cloud_x, cloud_y))
        until kill_cloud done
      else ()
    end
    ||
    begin
      run (node !nodes.(0) neighbors.(0) ((cloud_x, cloud_y)) nodes_info)
      ||
      run (sink !nodes.(1) neighbors.(1) ((cloud_x, cloud_y)) !nodes nodes_info)
      ||
      for i = 2 to Array.length !nodes - 1 dopar
        run (node !nodes.(i) neighbors.(i) ((cloud_x, cloud_y)) nodes_info)
      done
    end
    ||
    run (temps)
    ||
    if number_of_instants > 0 then
      begin
        let t_init = Unix.time () in
        for i = 1 to number_of_instants do pause done;
        let t_fin = Unix.time () in
        Stat.end_stat t_init t_fin;
        exit 0;
      end
    ||
    if !Init.with_graphics then
      begin
        draw_init ();
        loop
          await nodes_info (all) in
          draw_all all {x = pre ?cloud_x; y = pre ?cloud_y}
        end
        ||
        run (fan_and_plane wind_x wind_y kill_cloud add)
      end
  end
