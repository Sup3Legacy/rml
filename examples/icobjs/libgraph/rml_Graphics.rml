open Misc;;
open Unix;;


type pos =
{
	xi : int;
	yi : int;
};;


type color = Graphics.color

let black   = Graphics.black;;
let white   = Graphics.white;;
let red     = Graphics.red;;
let green   = Graphics.green;;
let blue    = Graphics.blue;;
let yellow  = Graphics.yellow;;
let cyan    = Graphics.cyan;;
let magenta = Graphics.magenta;;

type objet_graphic =
       | Image of Misc.t * pos
       | Texte of string * Graphics.color * pos
       | Line       of pos * pos * Graphics.color
       | Fillrect   of pos * pos * Graphics.color
       | Drawrect   of pos * pos * Graphics.color
       | Fillcircle of pos * int * Graphics.color
       | Drawcircle of pos * int * Graphics.color;;

(**)

let get_mouse_pos() =
  let status = Graphics.wait_next_event [Graphics.Poll] in
(*  let max_x_2 = (Graphics.size_x()) / 2 in*)
(*  let max_y_2 = (Graphics.size_y()) / 2 in*)
  {xi = status.Graphics.mouse_x;
   yi = status.Graphics.mouse_y
  };;

let get_key = Graphics.read_key;;

let color_of_int = function
  | 0 -> Graphics.rgb   0   0   0  (* noir *)
  | 1 -> Graphics.rgb   0   0 192  (* blue *)
  | 2 -> Graphics.rgb   0 204   0  (* green *)
  | 3 -> Graphics.rgb   0 255 255  (*  white *)
  | 4 -> Graphics.rgb 150   0   0  (* bordeau *) 
  | 5 -> Graphics.rgb 255  89  65  (*  (* rose orange *)  *)
  | 6 -> Graphics.rgb 255 240   0  (* yellow *)
  | _ -> Graphics.rgb 128 128   0;;






let affiche_objet = function(* affiche un objet graphique *)
  | Image (t,p)         -> Misc.misc_draw_image t p.xi p.yi
  | Texte (s,c,p)       -> Graphics.moveto p.xi p.yi;
                           Graphics.set_color c;
                           Graphics.draw_string s;
  | Fillrect (x1,x2,c) -> Graphics.set_color c; 
                      Graphics.fill_rect x1.xi x1.yi x2.xi x2.yi
  | Drawrect (x1,x2,c) -> Graphics.set_color c; 
                      Graphics.draw_rect x1.xi x1.yi x2.xi x2.yi
  | Line (p1,p2,c) -> Graphics.set_color c;
                      Graphics.moveto p1.xi p1.yi; 
                      Graphics.lineto p2.xi p2.yi
  | Fillcircle (p,r,c) -> Graphics.set_color (color_of_int c);
                      Graphics.fill_circle p.xi p.yi r
  | Drawcircle (p,r,c) -> Graphics.set_color (color_of_int c);
                      Graphics.draw_circle p.xi p.yi r;;

let text_size = Graphics.text_size;;
let image_size = Misc.misc_size;;
let load_image = Misc.misc_load;;



let affiche_list l =
  Graphics.clear_graph ();
  List.iter (List.iter (function l ->affiche_objet l)) l;;


(*  Graphics.clear_graph();;*)
(*  Graphics.synchronize();;*)




let draw_image t {xi=x;yi=y} = Misc.misc_draw_image t x y;;

let draw_texte str col {xi=x;yi=y} = Graphics.moveto x y;
                                     Graphics.set_color col;
                                     Graphics.draw_string str;;

let draw_rect {xi=x1;yi=y1} {xi=x2;yi=y2} col =
         Graphics.set_color col; 
	 Graphics.fill_rect x1 y1 x2 y2;;










(******************************************************)
let fenetre affiche =
(*----------------------------------------------------*)
(*----------------------------------------------------*)
(* machine read_click [new_planete]                   *)
(*----------------------------------------------------*)
     let rec process read_click button_p pos_p a_click a_move mouse_pos mouse_down =
      let button = Graphics.button_down() in 
      let pos    = get_mouse_pos () in
      (if button_p then
          (if (not button) then
             emit a_click pos
           else
	     if not (pos = pos_p) then
	         emit a_move {xi=pos.xi - pos_p.xi; yi=pos.yi - pos_p.yi};
	  )
       else
           if button then
	      emit mouse_down (pos)
	   else
	      nothing;
      );
      emit mouse_pos (pos);
      pause;
      run (read_click button pos a_click a_move mouse_pos mouse_down)
  in
(* Begin louis *)
(*
     let process create_doublesingleclick a_click ds realclick realdoubleclick =
     signal finattente in
     loop
       await one a_click (fstpos) in
       do
         await ds;
         await ds;
         await ds;
	 emit realclick (fstpos);
	 emit finattente;
	 pause;
	 ||
         await immediate one a_click (p) in
	 emit realdoubleclick (p);
	 emit finattente;
	 pause;
       until finattente done;
     end
  in
*)
     let process create_doublesingleclick a_click ds realclick realdoubleclick =
       loop 
	 await one a_click(fst_pos) in
	 do
	   await ds;
           await ds;
           await ds;
	   emit realclick (fst_pos)
	 until a_click (p) ->
	   emit realdoubleclick (List.hd p);
	   pause
	 done
       end
     in

(* End louis*)

(*-----------------------------------------------------*)
(* machine read_key [] emet un instant sur deux        *)
(*-----------------------------------------------------*)
    let process read_key key_push =
      loop 
        if Graphics.key_pressed() then
           emit key_push (get_key ());
        pause;
      end
  in
(*-----------------------------------------------------*)
(* machine genere_temps [] emet toute les deci-seconde *)
(*-----------------------------------------------------*)
    let process genere_temps freq ds=
     loop
       for i = 1 to freq
       do
         pause;
       done;
       emit ds;
   end
 in

(*-----------------------------------------------------*)
(* machine read_key []                                 *)
(*-----------------------------------------------------*)
  fun taille_x taille_y freq -> 
  fun a_click a_doubleclick a_move key_push pos p mouse_down ->
  process
  begin
(*    let t = ref (gettimeofday ()) in*)
(*----------------------------------------------------*)
    signal internalclick in
    signal ds in
    Graphics.open_graph (" " ^ (string_of_int taille_x) ^ "x" ^
                                (string_of_int taille_y));
    Graphics.auto_synchronize false;
    begin
      loop
	await p(all) in
	affiche all;
	Graphics.synchronize ();
      end
      ||
      run (read_click false
             (get_mouse_pos ()) internalclick a_move pos mouse_down)
      ||
      run (read_key key_push)
      ||
      run (genere_temps freq ds)
      ||
      run (create_doublesingleclick internalclick ds a_click a_doubleclick)
    end
  end

