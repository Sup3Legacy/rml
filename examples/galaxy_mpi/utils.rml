open Mlsdl_types
open Rmlsdl

let random_int min max =
  min + Random.int (max - min)

let random_float min max =
  min +. Random.float (max -. min)

let process sustain n s v =
  for i = 1 to n do
    emit s(v);
    pause
  done

(* Vector operations*)
type vector = { v_x : float; v_y : float; v_z : float }

let mk_vector x y z =
  { v_x = x; v_y = y; v_z = z }

let zero_vector = { v_x = 0.0; v_y = 0.0; v_z = 0.0 }

let random_vector xmin ymin xmax ymax =
  { v_x = random_float xmin xmax;
    v_y = random_float ymin ymax;
    v_z = 0.0; }

let norm2 v =
  v.v_x *. v.v_x +. v.v_y *. v.v_y +. v.v_z *. v.v_z

let dist2 v1 v2 =
  (v2.v_x -. v1.v_x) *. (v2.v_x -. v1.v_x)
    +. (v2.v_y -. v1.v_y) *. (v2.v_y -. v1.v_y)
    +. (v2.v_z -. v1.v_z) *. (v2.v_z -. v1.v_z)

let unit_vector v1 v2 =
  let d2 = dist2 v1 v2 in
  let d = sqrt d2 in
  { v_x = (v2.v_x -. v1.v_x) /. d;
    v_y = (v2.v_y -. v1.v_y) /. d;
    v_z = (v2.v_z -. v1.v_z) /. d }

let normal_unit_vector v1 v2 =
  let d2 = dist2 v1 v2 in
  let d = sqrt d2 in
  { v_x = -. (v2.v_y -. v1.v_y) /. d;
    v_y = (v2.v_x -. v1.v_x) /. d;
    v_z = (v2.v_z -. v1.v_z) /. d }

let (++.) v1 v2 =
  { v_x = v1.v_x +. v2.v_x;
    v_y = v1.v_y +. v2.v_y;
    v_z = v1.v_z +. v2.v_z }

let ( **. ) a v =
  { v_x = a *. v.v_x; v_y = a *. v.v_y; v_z = a *. v.v_z;  }

let center_float r =
  { v_x = r.r_x +. (r.r_w /. 2.0);
    v_y = r.r_y +. (r.r_h /. 2.0);
    v_z = 0.0 }

let vector_error v1 v2 =
  (dist2 v1 v2) /. (norm2 v1)

(* Data structures *)

let gen_id =
  let counter = ref 0 in
  fun () ->
    incr counter;
    !counter

type body{'ck|} =
    { b_id : int;
      mutable b_pos : (vector, vector) event{'ck|};
      mutable b_vel : vector;
      b_weight : float; }

let process mk_body ck pos v weight =
  signal pos at ck default pos gather (fun v _ -> v) in
  { b_id = gen_id ();
    b_pos = pos;
    b_vel = v;
    b_weight = weight;
  }

(* Computing forces *)
let g = 3.0

let force (pos2, w2) pos1 =
  let d2 = dist2 pos1 pos2 in
  if (d2 <> 0.0) then
    let f12 = (g *. w2) /. d2 in
    (*print_float f12; print_newline (); *)
    f12 **. (unit_vector pos1 pos2)
  else
    zero_vector

let process env_signal =
  let add_force f_new f (pos: vector) =
    (f_new pos) ++. (f pos)
  in
  signal env default (fun _ -> zero_vector) gather add_force in
  env

(**This is semi implicit Euler method *)
(*let compute_pos dt st all =
  let add_force f body = add_vector (force st.b_pos body) f in
  let f = List.fold_left add_force zero_vector all in
  st.b_vel <- add_vector st.b_vel (scalar_mult dt f);
  st.b_pos <- add_vector st.b_pos (scalar_mult dt st.b_vel)
*)

(* various functions to create examples *)
let random_pos_planet c_x c_y dmin dmax =
  let rand_away z d =
    if Random.bool () then z +. d else z -. d
  in
  let d = random_float dmin dmax in
  let x = random_float (c_x -. d) (c_x +. d) in
  let dy = sqrt ( (d *. d) -. ((x -. c_x) *. (x -. c_x)) ) in
  let y = rand_away c_y dy in
  mk_vector x y 0.0


let process compute_a env x w =
  emit env (force (x, w));
  await env(f) in
  f x

let process body_sprite st sp =
  loop
    await st.b_pos(p) in
    Mlsdl_client.set_sprite_pos sp p.v_x p.v_y;
    Mlsdl_client.draw_sprite sp
  end


let process solar_system_sprite m sp =
  loop
    let p, _ = !!m in
    Mlsdl_client.set_sprite_pos sp p.v_x p.v_y;
    Mlsdl_client.draw_sprite sp;
    pause
  end
