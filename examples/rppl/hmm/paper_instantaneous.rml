open Distribution

let () = Random.self_init()
let speed = [7.0; 7.0]
let noise = [5.0; 5.0]

(* Input/Output *)

let () =
  Graphics.open_graph " 400x400";
  Graphics.auto_synchronize false


let observe_state (x, y) =
  [ Distribution.draw (Distribution.gaussian x 5.);
    Distribution.draw (Distribution.gaussian y 5.) ]

let process sensor obs =
  loop
    ignore (Graphics.wait_next_event [Graphics.Poll]);
    let (x, y) = Graphics.mouse_pos () in
    if 0 < x && x < 400 && 0 < y && y < 400 then begin
      let o = observe_state (float x, float y) in
      emit obs o
    end;
    pause
  end

let process draw_point color pos =
  begin match pos with
  | [ x ; y ] ->
      for i = 1 to 1 do
        Graphics.set_color color;
        Graphics.draw_circle (int_of_float x) (int_of_float y) 2;
        pause
      done
  | _ -> assert false
  end

let process draw_point_dist dist =
  begin match dist with
  | Dist_sampler (_, _) -> assert false
  | Dist_support support ->
      run Rml_list.par_iter
        (proc (pos, prob) ->
          let color =
            let n = int_of_float (255. *. (1. -. max 0.4 prob)) in
            if prob > 0.003 then Graphics.black
            else Graphics.rgb n n n
          in
          run draw_point color pos)
        support
  end

let process display obs pos_dist =
  let rec process display_obs =
    await obs([o]) in
    run draw_point Graphics.red o ||
    run display_obs
  in
  let rec process display_estimate =
    await pos_dist([d]) in
    run draw_point_dist d ||
    run display_estimate
  in
  loop
    Graphics.synchronize ();
    Graphics.clear_graph ();
    pause
  end
  |>
  run display_obs
  ||
  run display_estimate


(* The code used in the paper *)

let rec process hmm' obs pos_dist last_dist =
  await obs([o_t]) in
  let dist =
    infer
      (process (
         let p_prev = sample (last_dist) in
         let p_t = sample (sph_gaussian p_prev speed) in
         factor (score (sph_gaussian p_t noise) o_t);
         p_t))
  in
  emit pos_dist dist;
  run hmm' obs pos_dist dist

let process main =
  signal obs in
  signal pos_dist in
  run hmm' obs pos_dist (Dist_support [[200.; 200.], 1.0]) ||
  run sensor obs ||
  run display obs pos_dist

let () =
  run main
